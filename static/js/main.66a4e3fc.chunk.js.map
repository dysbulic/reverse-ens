{"version":3,"sources":["ENSReverse.tsx","App.tsx","index.tsx"],"names":["ethereum","window","web3","Web3","logger","css","args","splice","console","log","apply","tooltips","self","net","registrar","reverse","address","resolver","owner","name","onboarding","MetamaskOnboarding","params","useParams","useState","setName","titles","setTitles","addrs","setAddrs","tracts","setTracts","loading","setLoading","toast","useToast","placement","useBreakpointValue","input","useRef","updateAddr","obj","as","updateTract","ts","reset","useEffect","on","off","resetAndSet","accts","undefined","handlers","func","startOnboarding","if","isMetaMaskInstalled","a","request","method","addresses","addr","eth","getChainId","chainId","Error","substr","ens","getOwner","test","getAddress","message","includes","registrarContract","Contract","registrarABI","options","getResolver","reverseResolver","ensEntry","methods","node","call","resolved","title","description","duration","current","focus","some","tract","alert","confirm","send","from","maxW","justify","justifyItems","m","mr","alignSelf","w","textAlign","placeholder","value","ref","onChange","evt","target","templateColumns","alignItems","Object","entries","map","i","key","onCopy","useClipboard","display","sx","bg","hasArrow","label","pr","minW","userSelect","textOverflow","whiteSpace","overflowX","ml","size","onClick","Copy","h","error","disabled","mt","length","path","component","ENSReverse","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.66a4e3fc.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport Web3 from 'web3'\nimport MetamaskOnboarding from '@metamask/onboarding'\nimport {\n  Stack, Input, Container, Flex, Button, Text, Box,\n  Grid, useClipboard, useToast, Spinner, Tooltip, useBreakpointValue, Placement,\n} from '@chakra-ui/react'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { abi as registrarABI } from '@ensdomains/ens-contracts/artifacts/contracts/registry/ReverseRegistrar.sol/ReverseRegistrar.json'\nimport { useParams } from 'react-router-dom'\nimport { CopyIcon } from '@chakra-ui/icons'\nimport { useRef } from 'react'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n  }\n}\nconst { ethereum } = window\nconst web3 = new Web3(ethereum)\n\nconst logger = (css: string) => (\n  (...args: unknown[]) => {\n    args[0] = `%c ${args[0]} `\n    args.splice(1, 0, css)\n    console.log.apply(this, args)\n  }\n)\n\ninterface Addresses extends Partial<Record<string, string>> {\n  self?: string\n  address?: string\n  owner?: string\n  reverse?: string\n  net?: string\n  resolver?: string\n  registrar?: string\n  name?: string\n}\n\ninterface Contracts {\n  resolver?: Contract\n  registrar?: Contract\n  reverseResolver?: Contract\n}\n\ninterface Parameters {\n  name?: string\n}\n\nconst tooltips: Record<string, string> = {\n  self: 'This is the address of your wallet. The reverse record is an ENS name that is returned when users search on this address. There is only one reverse record per address.',\n  net: 'The currently selected ethereum chain. In general ENS resolution is done on the mainnet, but instances exist on some of the test chains as well.',\n  registrar: 'This is the contract that controls name registration for the reverse records.',\n  reverse: 'This is a specially formatted address that is used to look up your reverse record.',\n  address: \"The forward resolution for the currently selected name to use for the reverse record. There is no technical requirement that this resolve to your wallet address, but if it doesn't, many implementations will disregard the record.\", \n  resolver: 'This is the contract address for the resolver for the resolution of reverse entries.',\n  owner: 'When you create a reverse entry, you are set as the owner of the reverse address.',\n  name: 'This is the currently configured reverse record for your wallet address.',\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const onboarding = new MetamaskOnboarding()\n  const params = useParams<Parameters>()\n  const [name, setName] = useState(params.name)\n  const [titles, setTitles] = useState({\n    self: 'Your Address',\n    net: 'Current Network',\n    registrar: 'Reverse Registrar Address',\n    reverse: 'Reverse Address',\n    resolver: 'Resolver Address',\n    address: null as string | null,\n    owner: 'Reverse Lookup Owner',\n    name: 'Current Reverse',\n  })\n  const [addrs, setAddrs] = useState<Addresses>({})\n  const [tracts, setTracts] = useState<Contracts>({})\n  const [loading, setLoading] = useState(false)\n  const toast = useToast()\n  const placement = (\n    useBreakpointValue<Placement>(['bottom', 'right'])\n  )\n  const input = useRef<HTMLInputElement | null>(null)\n\n  const updateAddr = (obj: object) => {\n    setAddrs(as => ({ ...as, ...obj }))\n  }\n  const updateTract = (obj: object) => {\n    setTracts(ts => ({ ...ts, ...obj }))\n  }\n\n  const reset = () => {\n    setAddrs({})\n    setTracts({})\n  }\n  useEffect(() => {\n    ethereum?.on('chainChanged', reset)\n    return () => ethereum?.off('chainChanged', reset)\n  }, [])\n  useEffect(() => {\n    const resetAndSet = (accts: string[]) => {\n      reset()\n      updateAddr({ self: accts[0] })\n    }\n    ethereum?.on('accountsChanged', resetAndSet)\n    return () => ethereum?.off(\n      'accountsChanged', resetAndSet\n    )\n  }, [])\n\n  useEffect(() => {\n    setTitles((ts) => (\n      { ...ts, address: name ? `${name}'s Address` : null }\n    ))\n    setAddrs((as) => (\n      { ...as, address: undefined }\n    ))\n  }, [name])\n\n  const handlers = [\n    {\n      name: 'Install MetaMask',\n      func: () => onboarding.startOnboarding(),\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Connect Ethereum Wallet',\n      func: async () => {\n        const log = logger('color: purple')\n        log('Enabling Inpage Provider')\n        const addresses = await (\n          ethereum?.request({ method: 'eth_requestAccounts' })\n        )\n        const addr = addresses?.[0]\n        log('Wallet Address', addr)\n        updateAddr({ self: addr })\n      },\n      if: () => (!!ethereum && !addrs.self),\n    },\n    {\n      name: 'Load Contracts',\n      func: async () => {\n        const log = logger('color: orange; background-color: purple')\n\n        const net = await (async () => {\n          const chainId = await web3.eth.getChainId()\n          switch(chainId) {\n            case 1: return 'mainnet'\n            case 2: return 'Morden'\n            case 3: return 'Ropsten'\n            case 4: return 'Rinkeby'\n            case 42: return 'Kovan'\n            case 100: return 'xDAI'\n            default: return `unknown (id:${chainId})`\n          }\n        })()\n        log('Setting Network Name', net)\n        updateAddr({ net })\n\n        if(!addrs.self) {\n          throw new Error('Wallet Address Not Set')\n        }\n        const reverse = (\n          `${addrs.self.substr(2)}.addr.reverse`\n        )\n        log('Adding Reverse Address', reverse)\n        updateAddr({ reverse })\n\n        const registrar = (\n          await web3.eth.ens.getOwner('addr.reverse')\n        )\n        log('Reverse Registrar', registrar)\n        if(!registrar || /^0x0+$/.test(registrar)) {\n          throw new Error(\"Couldn't Resolve Reverse Registrar\")\n        }\n        updateAddr({ registrar })\n\n        try {\n          if(!name) {\n            throw new Error('Name Not Set')\n          }\n          const address = await web3.eth.ens.getAddress(name)\n          updateAddr({\n            address,\n            owner: await web3.eth.ens.getOwner(reverse),\n          })\n        } catch(err) {\n          if(\n            err.message.includes(\n              'does not implement requested method'\n            )\n            || err.message.includes(\n              'Name Not Set'\n            )\n          ) {\n            updateAddr({ address: null, owner: null })\n          } else {\n            throw err\n          }\n        }\n\n        if(!registrar) {\n          throw new Error('Reverse Registrar Address Not Set')\n        }\n        const registrarContract = new web3.eth.Contract(\n          registrarABI as AbiItem[], registrar\n        )\n        log('Reverse Registrar', registrarContract.options.address)\n        updateTract({ registrar: registrarContract })\n\n        if(!reverse) {\n          throw new Error('Reverse Address Is Not Set')\n        }\n        const reverseResolver = await (\n          web3.eth.ens.getResolver(reverse)\n        )\n        updateTract({ reverseResolver })\n\n        const address = reverseResolver.options.address\n        updateAddr({ resolver: address })\n\n        let ensEntry = name\n\n        if(/^0x0+$/.test(address)) {\n          updateAddr({ name: null })\n        } else {\n          const node = await (\n            registrarContract.methods.node(addrs.self).call()\n          )\n          const resolved = (\n            (await reverseResolver.methods.name(node).call())\n            ?? null\n          )\n          updateAddr({ name: resolved })\n          if(!name) {\n            ensEntry = resolved\n            setName(resolved)\n            toast({\n              title: 'Set Name',\n              description: (\n                `Defaulting name to current reverse record: \"${resolved}\".`\n              ),\n              duration: 3000,\n            })\n            input.current?.focus()\n          }\n        }\n\n        if(ensEntry) {\n          const resolver = await web3.eth.ens.getResolver(ensEntry)\n          updateTract({ resolver })\n        }\n      },\n      if: () => (\n        !!addrs.self\n        && [\n          addrs.net, addrs.reverse, addrs.registrar,\n          addrs.address, addrs.owner,\n          addrs.name, tracts.resolver,\n          tracts.registrar, tracts.reverseResolver,\n        ].some(tract => tract === undefined)\n      ),\n    },\n    {\n      name: name ? (\n        `Set ${name} As Reverse`\n      ) : (\n        'Enter A Name To Use As Reverse'\n      ),\n      func: async () => {\n        if(!name || addrs.name === name) {\n          if(name) {\n            alert(`Reverse Already Set To: ${name}`)\n          }\n          return input.current?.focus()\n        }\n        if(\n          !addrs.name\n          || window.confirm(`Overwrite ${addrs.name}?`)\n        ) {\n          if(!tracts.registrar) {\n            throw new Error('Reverse Registrar Contract Not Set')\n          }\n          setLoading(true)\n          await (\n            tracts.registrar.methods\n            .setName(name)\n            .send({ from: addrs.self })\n          )\n          updateTract({ resolver: undefined })\n          updateAddr({ name: undefined, owner: undefined })\n          setLoading(false)\n        }\n      },\n      if: () => (\n        ![\n          addrs.net, addrs.reverse, addrs.registrar,\n          addrs.address, addrs.owner,\n          addrs.name, tracts.resolver,\n          tracts.registrar, tracts.reverseResolver,\n        ].some(tract => tract === undefined)\n      )\n    }\n  ]\n\n  return (\n    <Container maxW=\"100%\">\n      <Stack>\n        <Flex justify=\"center\" justifyItems=\"center\">\n          <Text m={0} mr={2} alignSelf=\"center\">\n            ENS Name For Reverse Record:\n          </Text>\n          <Input\n            w=\"auto\" textAlign=\"center\"\n            placeholder=\"Exe: sample.ens.eth\"\n            value={name ?? ''} ref={input}\n            onChange={(evt) => {\n              setName(evt.target.value)\n              updateAddr({ address: undefined })\n              updateTract({ resolver: undefined })\n            }}\n          />\n        </Flex>\n        <Grid\n          templateColumns={['auto', 'auto 1fr']}\n          alignItems=\"center\" maxW=\"100vw\"\n        >\n          {Object.entries(titles).map(([key, title], i) => {\n            const { onCopy } = useClipboard(addrs[key] ?? '')\n            if(!title) return null\n            return (\n              <Box\n                key={i} display=\"contents\"\n                sx={{ '&:hover > *': { bg: '#FBFF0522' } }}\n              >\n                <Tooltip\n                  hasArrow placement={placement}\n                  label={tooltips[key]}\n                >\n                  <Text\n                    textAlign={['left', 'right']}\n                    m={0} pr={5} minW=\"12em\"\n                    userSelect=\"none\"\n                  >\n                    {title}:\n                  </Text>\n                </Tooltip>\n                <Text\n                  m={0} textOverflow=\"clip\" whiteSpace=\"nowrap\"\n                  title={addrs[key]} overflowX=\"hidden\" ml={[5, 0]}\n                >\n                  {addrs[key] && (\n                    <Button\n                      title=\"Copy\" mr={2} size=\"xs\"\n                      onClick={() => {\n                        onCopy()\n                        toast({\n                          title: 'Value Copied',\n                          duration: 1500,\n                        })\n                      }}\n                    >\n                      <CopyIcon/>\n                    </Button>\n                  )}\n                  <code>\n                    {addrs[key] === null ? (\n                      <em>Unset</em>\n                    ) : (\n                      addrs[key]\n                    )}\n                  </code>\n                </Text>\n              </Box>\n            )\n          })}\n        </Grid>\n      </Stack>\n      <Stack>\n        {handlers.map((h, i) => (\n          <Button\n            key={i}\n            onClick={async () => {\n              try {\n                await h.func()\n              } catch(err) {\n                console.error(err)\n                alert(err.message)\n                setLoading(false)\n              }\n            }}\n            disabled={loading || (h.if ? !h.if() : false)}\n            m={0} mt=\"0 ! important\"\n          >\n            {loading && (i + 1 === handlers.length) && (\n              <Spinner size=\"sm\" mr={3}/>\n            )}\n            {h.name}\n          </Button>\n        ))}\n      </Stack>\n    </Container>\n  )\n}","import {\n  HashRouter as Router, Switch, Route,\n} from 'react-router-dom'\nimport ENSReverse from './ENSReverse'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (\n  <Router>\n    <Switch>\n      <Route path='/:name?' component={ENSReverse}/>\n    </Switch>\n  </Router>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}