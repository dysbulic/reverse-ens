{"version":3,"sources":["ENSReverse.tsx","App.tsx","index.tsx"],"names":["ethereum","window","web3","Web3","logger","css","args","splice","console","log","apply","onboarding","MetamaskOnboarding","useState","name","setName","tld","setTLD","self","net","revRegistrar","rev","owner","revOwner","resolver","revName","titles","setTitles","addrs","setAddrs","tracts","setTracts","updateAddr","obj","as","updateTract","ts","on","accts","useEffect","handlers","func","startOnboarding","if","isMetaMaskInstalled","stopOnboarding","err","warn","a","request","method","addresses","addr","parseInt","networkVersion","revAddr","substr","eth","ens","getOwner","Contract","revRegistrarABI","methods","defaultResolver","call","Error","getResolver","options","address","node","confirm","claim","send","from","revLook","justify","textAlign","value","onChange","evt","target","templateColumns","alignItems","Object","entries","map","i","key","title","display","_hover","bg","m","pr","minW","textOverflow","h","onClick","disabled","py","mt","className","ENSReverse","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.74d28d12.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Web3 from 'web3'\n// To replace window.ethereum:\n// import { initProvider } from '@metamask/inpage-provider'\n// import * as LocalMessageDuplexStream from 'post-message-stream'\nimport MetamaskOnboarding from '@metamask/onboarding'\nimport {\n  Stack, Input, Container, Flex, UnorderedList, ListItem,\n  Button, Text, Box, Grid,\n} from '@chakra-ui/react'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { abi as resolverABI } from '@ensdomains/ens-contracts/artifacts/contracts/resolvers/Resolver.sol/Resolver.json'\nimport { abi as revRegistrarABI } from '@ensdomains/ens-contracts/artifacts/contracts/registry/ReverseRegistrar.sol/ReverseRegistrar.json'\nimport {\n  ensABI, registrarABI,\n} from './abi'\nimport { useEffect } from 'react'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n  }\n}\nconst { ethereum } = window\nconst web3 = new Web3(ethereum)\n\nconst logger = (css: string) => (\n  (...args: unknown[]) => {\n    args[0] = `%c ${args[0]} `\n    args.splice(1, 0, css)\n    console.log.apply(this, args)\n  }\n)\n\nconst namehash = (name: string) => {\n  let node = `0x${'0'.repeat(64)}`\n  if(name !== '') {\n    const labels = name.split('.')\n    for(let i = labels.length - 1; i >= 0; i--) {\n      node = (\n        web3.utils.sha3(\n          node + (web3.utils.sha3(labels[i]) ?? '').slice(2)\n        )\n        ?? ''\n      )\n    }\n  }\n  return node.toString()\n}\n\ninterface Addresses extends Partial<Record<string, string>> {\n  self?: string\n  owner?: string\n  rev?: string\n  net?: string\n  resolver?: string\n  revRegistrar?: string\n  ens?: string\n  defaultResolver?: string\n  revOwner?: string\n  revName?: string\n}\n\ninterface Contracts {\n  revResolver?: Contract\n  ens?: Contract\n  reg?: Contract\n  revRegistrar?: Contract\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const onboarding = new MetamaskOnboarding()\n  const [name, setName] = useState('dhappy')\n  const [tld, setTLD] = useState('eth')\n  const [titles, setTitles] = useState({\n    self: 'Your Address',\n    net: 'Current Network',\n    revRegistrar: 'Reverse Registrar Address',\n    rev: 'Reverse Address',\n    owner: `${name}.${tld} Owner`,\n    revOwner: `Reverse Lookup Owner`,\n    resolver: 'Resolver Address',\n    revName: 'Reverse Lookup',\n  })\n  const [addrs, setAddrs] = useState<Addresses>({})\n  const [tracts, setTracts] = useState<Contracts>({})\n\n  const updateAddr = (obj: object) => {\n    setAddrs(as => ({ ...as, ...obj }))\n  }\n  const updateTract = (obj: object) => {\n    setTracts(ts => ({ ...ts, ...obj }))\n  }\n\n  const reset = () => {\n    setAddrs({})\n    setTracts({})\n  }\n  ethereum.on('networkChanged', reset)\n  ethereum.on('accountsChanged', (accts: string[]) => (\n    updateAddr({ self: accts[0] })\n  ))\n\n  useEffect(() => {\n    setTitles((ts) => (\n      { ...ts, owner: `${name}.${tld} Owner` }\n    ))\n  }, [name, tld])\n\n  const handlers = [\n    {\n      name: 'Install MetaMask',\n      func: () => onboarding.startOnboarding(),\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Stop Onboarding',\n      func: () => { try {\n        onboarding.stopOnboarding()\n      } catch(err) {\n        console.warn(err)\n      } },\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Enable Ethereum on this Site',\n      func: async () => {\n        const log = logger('color: purple')\n        log('Enabling Inpage Provider')\n        const addresses = await (\n          window.ethereum.request({ method: 'eth_requestAccounts' })\n        )\n        const addr = addresses[0]\n        log('Wallet Address', addr)\n        updateAddr({ self: addr })\n      },\n      if: () => (!addrs.self),\n    },\n    {\n      name: 'Load Addresses',\n      func: async () => {\n        const log = logger('color: orange; background-color: purple')\n\n        const net = (() => {\n          switch(parseInt(ethereum.networkVersion)) {\n            case 1: return 'mainnet'\n            case 2: return 'Morden'\n            case 3: return 'Ropsten'\n            case 4: return 'Rinkeby'\n            case 42: return 'Kovan'\n            case 100: return 'xDAI'\n            default: return `unknown (id:${ethereum.networkVersion})`\n          }\n        })()\n        log('Setting addrs.net', net)\n        updateAddr({ net })\n\n        const revAddr = (\n          `${(addrs.self ?? '').substr(2)}.addr.reverse`\n        )\n        log('Adding Reverse Address', revAddr)\n        updateAddr({ rev: revAddr })\n\n        const revRegistrar = (\n          await web3.eth.ens.getOwner('addr.reverse')\n        )\n        updateAddr({ revRegistrar })\n\n        const revOwner = await web3.eth.ens.getOwner(revAddr)\n        updateAddr({ revOwner })\n      },\n      if: () => (!!addrs.self && !addrs.net),\n    },\n    {\n      name: 'Load Contracts',\n      func: async () => {\n        const log = logger('color: lightgray; background-color: black')\n\n        const revRegistrar = new web3.eth.Contract(\n          revRegistrarABI as AbiItem[], addrs.revRegistrar\n        )\n        updateTract({ revRegistrar })\n\n        const defaultResolver = await (\n          revRegistrar.methods.defaultResolver().call()\n        )\n        updateAddr({ defaultResolver })\n\n        if(!addrs.rev) throw new Error('Reverse Address Is Not Set')\n        const resolver = await (\n          web3.eth.ens.getResolver(addrs.rev)\n        )\n        updateAddr({ resolver: resolver.options.address })\n\n        const node = await (\n          revRegistrar.methods.node(addrs.self).call()\n        )\n        const revName = await resolver.methods.name(node).call()\n        updateAddr({ revName })\n  \n      },\n      if: () => (!!addrs.net && !tracts.revRegistrar),\n    },\n    {\n      name: 'Claim the Reverse Address',\n      func: async () => {\n        if(\n          addrs.revOwner !== addrs.self\n          && (\n            !addrs.revName\n            || window.confirm(`Overwrite ${addrs.revName}?`)\n          )\n        ) {\n          await (\n            tracts.revRegistrar\n            ?.methods.claim(addrs.self)\n            .send({ from: addrs.self })\n          )\n          if(!addrs.rev) throw new Error('Missing Reverse Address')\n          const revOwner = await web3.eth.ens.getOwner(addrs.rev)\n          updateAddr({ revOwner })\n        }\n      },\n      if: () => (!!addrs.revOwner && !!tracts.revRegistrar)\n    },\n    {\n      name: 'Set Resolver and Link Reverse Name',\n      func: async () => {\n        if(addrs.revLook !== `${name}.${tld}`) {\n          const node = await tracts.revRegistrar?.methods.setName(`${name}.${tld}`).send({ from: addrs.self })\n          // const revLook = await tracts.revRes?.methods.name(namehash(addrs.rev ?? '')).call()\n          // updateAddr('revLook', revLook)\n        }\n      },\n      if: () => !!tracts.ens && !!tracts.revRegistrar\n    }\n  ]\n\n  return (\n    <Container>\n      <Stack>\n        <Flex justify=\"center\">\n          <Input\n            textAlign=\"right\"\n            value={name}\n            onChange={evt => setName(evt.target.value)}\n          />\n          .\n          <Input\n            value={tld}\n            onChange={evt => setTLD(evt.target.value)}\n          />\n        </Flex>\n        <Grid templateColumns=\"auto 1fr\" alignItems=\"center\">\n          {Object.entries(titles).map(([key, title], i) => (\n            <Box key={i} display=\"contents\" _hover={{ bg: 'yellow' }}>\n              <Text m={0} textAlign=\"right\" pr={5} minW=\"12em\">{title}:</Text>\n              <Text m={0} textOverflow=\"clip\" title={addrs[key]}><code>{addrs[key]}</code></Text>\n            </Box>\n          ))}\n        </Grid>\n      </Stack>\n      <Stack>\n        {handlers.map((h, i) => (\n          <Button\n            key={i} onClick={h.func}\n            disabled={h.if ? !h.if() : false}\n            m={0} py={10} mt=\"0 ! important\"\n          >\n            {h.name}\n          </Button>\n        ))}\n      </Stack>\n    </Container>\n  )\n}","import React from 'react'\nimport { Container } from '@chakra-ui/react'\nimport ENSReverse from './ENSReverse'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (\n  <Container className=\"App\">\n    <ENSReverse/>\n  </Container>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}