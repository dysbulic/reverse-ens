{"version":3,"sources":["ENSReverse.tsx","App.tsx","index.tsx"],"names":["ethereum","window","web3","Web3","logger","css","args","splice","console","log","apply","namehash","name","node","repeat","labels","split","i","length","utils","sha3","slice","toString","onboarding","MetamaskOnboarding","useState","setName","tld","setTLD","self","net","revRegistrar","rev","owner","revOwner","resolver","revName","titles","setTitles","addrs","setAddrs","tracts","setTracts","updateAddr","obj","as","on","accts","useEffect","ts","handlers","func","startOnboarding","if","isMetaMaskInstalled","stopOnboarding","err","warn","a","request","method","addresses","addr","parseInt","networkVersion","revAddr","substr","eth","ens","getOwner","Contract","revRegistrarABI","methods","defaultResolver","call","Error","getResolver","options","address","reg","register","send","from","setResolver","resolve","claim","revLook","justify","textAlign","value","onChange","evt","target","templateColumns","Object","entries","map","key","title","display","_hover","bg","m","pr","h","onClick","disabled","py","mt","className","ENSReverse","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.4f53f97f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Web3 from 'web3'\n// To replace window.ethereum:\n// import { initProvider } from '@metamask/inpage-provider'\n// import * as LocalMessageDuplexStream from 'post-message-stream'\nimport MetamaskOnboarding from '@metamask/onboarding'\nimport {\n  Stack, Input, Container, Flex, UnorderedList, ListItem,\n  Button, Text, Box, Grid,\n} from '@chakra-ui/react'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { abi as resolverABI } from '@ensdomains/ens-contracts/artifacts/contracts/resolvers/Resolver.sol/Resolver.json'\nimport { abi as revRegistrarABI } from '@ensdomains/ens-contracts/artifacts/contracts/registry/ReverseRegistrar.sol/ReverseRegistrar.json'\nimport {\n  ensABI, registrarABI,\n} from './abi'\nimport { useEffect } from 'react'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n  }\n}\nconst { ethereum } = window\nconst web3 = new Web3(ethereum)\n\nconst logger = (css: string) => (\n  (...args: unknown[]) => {\n    args[0] = `%c ${args[0]} `\n    args.splice(1, 0, css)\n    console.log.apply(this, args)\n  }\n)\n\nconst namehash = (name: string) => {\n  let node = `0x${'0'.repeat(64)}`\n  if(name !== '') {\n    const labels = name.split('.')\n    for(let i = labels.length - 1; i >= 0; i--) {\n      node = (\n        web3.utils.sha3(\n          node + (web3.utils.sha3(labels[i]) ?? '').slice(2)\n        )\n        ?? ''\n      )\n    }\n  }\n  return node.toString()\n}\n\ninterface Addresses extends Partial<Record<string, string>> {\n  self?: string\n  owner?: string\n  rev?: string\n  net?: string\n  resolver?: string\n  revRegistrar?: string\n  ens?: string\n  defaultResolver?: string\n  revOwner?: string\n  revName?: string\n}\n\ninterface Contracts {\n  revResolver?: Contract\n  ens?: Contract\n  reg?: Contract\n  revRegistrar?: Contract\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const onboarding = new MetamaskOnboarding()\n  const [name, setName] = useState('dhappy')\n  const [tld, setTLD] = useState('eth')\n  const [titles, setTitles] = useState({\n    self: 'Your Address',\n    net: 'Current Network',\n    revRegistrar: 'Reverse Registrar Address',\n    rev: 'Reverse Address',\n    owner: `${name}.${tld} Owner`,\n    revOwner: `Reverse Lookup Owner`,\n    resolver: 'Resolver Address',\n    revName: 'Reverse Lookup',\n  })\n  const [addrs, setAddrs] = useState<Addresses>({})\n  const [tracts, setTracts] = useState<Contracts>({})\n\n  const updateAddr = (obj: object) => {\n    setAddrs(as => ({ ...as, ...obj }))\n  }\n  const updateTract = (key: string, val: Contract) => {\n    setTracts(ts => ({ ...ts, [key]: val }))\n  }\n\n  ethereum.on('networkChanged', () => {\n    setAddrs({})\n    setTracts({})\n  })\n  ethereum.on('accountsChanged', (accts: string[]) => (\n    updateAddr({ self: accts[0] })\n  ))\n\n  useEffect(() => {\n    setTitles((ts) => (\n      { ...ts, owner: `${name}.${tld} Owner` }\n    ))\n  }, [name, tld])\n\n  const handlers = [\n    {\n      name: 'Install MetaMask',\n      func: () => onboarding.startOnboarding(),\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Stop Onboarding',\n      func: () => { try {\n        onboarding.stopOnboarding()\n      } catch(err) {\n        console.warn(err)\n      } },\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Enable Ethereum on this Site',\n      func: async () => {\n        const log = logger('color: purple')\n        log('Enabling Inpage Provider')\n        const addresses = await (\n          window.ethereum.request({ method: 'eth_requestAccounts' })\n        )\n        const addr = addresses[0]\n        log('Wallet Address', addr)\n        updateAddr({ self: addr })\n      },\n      if: () => (!addrs.self),\n    },\n    {\n      name: 'Load Addresses',\n      func: async () => {\n        const log = logger('color: orange; background-color: purple')\n\n        const net = (() => {\n          switch(parseInt(ethereum.networkVersion)) {\n            case 1: return 'mainnet'\n            case 2: return 'Morden'\n            case 3: return 'Ropsten'\n            case 4: return 'Rinkeby'\n            case 42: return 'Kovan'\n            case 100: return 'xDAI'\n            default: return `unknown (id:${ethereum.networkVersion})`\n          }\n        })()\n        log('Setting addrs.net', net)\n        updateAddr({ net })\n\n        const revAddr = (\n          `${(addrs.self ?? '').substr(2)}.addr.reverse`\n        )\n        log('Adding Reverse Address', revAddr)\n        updateAddr({ rev: revAddr })\n\n        const revRegistrar = (\n          await web3.eth.ens.getOwner('addr.reverse')\n        )\n        updateAddr({ revRegistrar })\n\n        const revOwner = await web3.eth.ens.getOwner(revAddr)\n        updateAddr({ revOwner })\n      },\n      if: () => (!!addrs.self && !addrs.net),\n    },\n    {\n      name: 'Load Contracts',\n      func: async () => {\n        const log = logger('color: lightgray; background-color: black')\n\n        const revRegistrar = new web3.eth.Contract(\n          revRegistrarABI as AbiItem[], addrs.revRegistrar\n        )\n\n        const defaultResolver = await (\n          revRegistrar.methods.defaultResolver().call()\n        )\n        updateAddr({ defaultResolver })\n\n        if(!addrs.rev) throw new Error('Reverse Address Is Not Set')\n        const resolver = await (\n          web3.eth.ens.getResolver(addrs.rev)\n        )\n        updateAddr({ resolver: resolver.options.address })\n\n        // let name = await (\n        //   publicResolver.methods.name(namehash(addrs.rev ?? ''))\n        //   .call()\n        // )\n        const node = await (\n          revRegistrar.methods.node(addrs.self).call()\n        )\n        const revName = await resolver.methods.name(node).call()\n        updateAddr({ revName })\n        // updateAddr('revLook', name)\n\n        // log(`Looking Up Owner of ${tld}`)\n        // const registrarAddress = await ens.methods.owner(namehash(tld)).call()\n        // updateAddr('reg', registrarAddress)\n        // log('Owner', registrarAddress)\n  \n        // log('Creating ENS and Regisrtar Contracts')\n        // const registrar = new web3.eth.Contract(registrarAbi, registrarAddress)\n        // log('Contracts Completed', `ens:${ens}`, `reg:${registrar}`)\n  \n        // log(`Looking Up Owner of addr.reverse`)\n        // const reverseRegistarAddr = await ens.methods.owner(namehash('addr.reverse')).call()\n        // updateAddr('revReg', reverseRegistarAddr)\n        // log('Owner', reverseRegistarAddr)\n  \n        // log(`Creating a Reverse Resolver (${addrs.rev})`)\n        // const reverseResolverAddr = await ens.methods.resolver(namehash(addrs.rev)).call()\n        // log(reverseResolverAddr) // null\n        // const reverseResolver = new web3.eth.Contract(publicResolverAbi, reverseResolverAddr)\n        // // let name = await reverseResolver.methods.name(namehash(addrs.rev)).call()\n        // // updateAddr('revLook', name)\n        // // console.log('Got Reverse Lookup', name)\n  \n        // log(`Looking Up Owner of ${addrs.rev}`)\n        // let owner = await ens.methods.owner(namehash(addrs.rev)).call()\n        // updateAddr('revOwn', owner)\n        // log('Owner', owner)\n  \n        // log(`Looking Up Owner of ${name}.${tld}`)\n        // owner = await ens.methods.owner(namehash(`${name}.${tld}`)).call()\n        // updateAddr('owner', owner)\n        // log('Owner', owner)\n  \n        // log('Creating ENS and Regisrtar Contracts')\n        // const registrar = new web3.eth.Contract(registrarAbi, registrarAddress)\n        // log('Contracts Completed', `ens:${ens}`, `reg:${registrar}`)\n\n        // log(`Looking Up Owner of ${tld}`)\n        // const registrarAddress = await ens.methods.owner(namehash(tld)).call()\n        // updateAddr('reg', registrarAddress)\n        // log('Owner', registrarAddress)\n\n        // log('Creating ENS and Regisrtar Contracts')\n        // const registrar = new web3.eth.Contract(registrarAbi, registrarAddress)\n        // log('Contracts Completed', `ens:${ens}`, `reg:${registrar}`)\n\n        // log(`Looking Up Owner of addr.reverse`)\n        // const reverseRegistarAddr = await ens.methods.owner(namehash('addr.reverse')).call()\n        // updateAddr('revReg', reverseRegistarAddr)\n        // log('Owner', reverseRegistarAddr)\n\n        // log(`Creating a Reverse Resolver (${addrs.rev})`)\n        // const reverseResolverAddr = await ens.methods.resolver(namehash(addrs.rev)).call()\n        // log(reverseResolverAddr) // null\n        // const reverseResolver = new web3.eth.Contract(publicResolverAbi, reverseResolverAddr)\n        // // let name = await reverseResolver.methods.name(namehash(addrs.rev)).call()\n        // // updateAddr('revLook', name)\n        // // console.log('Got Reverse Lookup', name)\n\n        // log(`Looking Up Owner of ${addrs.rev}`)\n        // let owner = await ens.methods.owner(namehash(addrs.rev)).call()\n        // updateAddr('revOwn', owner)\n        // log('Owner', owner)\n\n        // log(`Looking Up Owner of ${name}.${tld}`)\n        // owner = await ens.methods.owner(namehash(`${name}.${tld}`)).call()\n        // updateAddr('owner', owner)\n        // log('Owner', owner)\n\n        // log('Caching Contracts')\n        // const reverseRegistrar = new web3.eth.Contract(reverseRegistrarAbi, reverseRegistarAddr)\n        // const tracts = { reg: registrar, ens: ens, revRes: reverseResolver, revReg: reverseRegistrar }\n        // console.log(tracts)\n        // setTracts(t => Object.assign({}, t, tracts))\n        // log('Done')\n      },\n      if: () => !!addrs.net && !tracts.revRegistrar,\n    },\n    {\n      name: `Register: ${name}.${tld}`,\n      func: async () => {\n        if(addrs.owner !== addrs.self) {\n          await tracts.reg?.methods.register(web3.utils.sha3(name), addrs.self).send({ from: addrs.self })\n          let owner = await tracts.ens?.methods.owner(namehash(`${name}.${tld}`)).call()\n          updateAddr({ owner })\n        }\n      },\n      if: () => addrs.owner !== addrs.self,\n    },\n    {\n      name: 'Set a Resolver for the New Domain',\n      func: async () => {\n        await tracts.ens?.methods.setResolver(namehash(`${name}.${tld}`), addrs.resolve).send({ from: addrs.self })\n      },\n      if: () => !!tracts.ens && !!addrs.resolve,\n    },\n    {\n      name: 'Claim the Reverse Address',\n      func: async () => {\n        if(addrs.revOwner !== addrs.self) {\n          await (\n            tracts.revRegistrar\n            ?.methods.claim(addrs.self)\n            .send({ from: addrs.self })\n          )\n          if(!addrs.rev) throw new Error('Missing Reverse Address')\n          const revOwner = await web3.eth.ens.getOwner(addrs.rev)\n          updateAddr({ revOwner })\n        }\n      },\n      if: () => !!addrs.rev && !!tracts.revRegistrar\n    },\n    {\n      name: 'Set Resolver and Link Reverse Name',\n      func: async () => {\n        if(addrs.revLook !== `${name}.${tld}`) {\n          const node = await tracts.revRegistrar?.methods.setName(`${name}.${tld}`).send({ from: addrs.self })\n          // const revLook = await tracts.revRes?.methods.name(namehash(addrs.rev ?? '')).call()\n          // updateAddr('revLook', revLook)\n        }\n      },\n      if: () => !!tracts.ens && !!tracts.revRegistrar\n    }\n  ]\n\n  return (\n    <Container>\n      <Stack>\n        <Flex justify=\"center\">\n          <Input\n            textAlign=\"right\"\n            value={name}\n            onChange={evt => setName(evt.target.value)}\n          />\n          .\n          <Input\n            value={tld}\n            onChange={evt => setTLD(evt.target.value)}\n          />\n        </Flex>\n        <Grid templateColumns=\"auto 1fr\">\n          {Object.entries(titles).map(([key, title], i) => (\n            <Box key={i} display=\"contents\" _hover={{ bg: 'yellow' }}>\n              <Text m={0} textAlign=\"right\" pr={5}>{title}:</Text>\n              <Text m={0}><code>{addrs[key]}</code></Text>\n            </Box>\n          ))}\n        </Grid>\n      </Stack>\n      <Stack>\n        {handlers.map((h, i) => (\n          <Button\n            key={i} onClick={h.func}\n            disabled={h.if ? !h.if() : false}\n            m={0} py={10} mt=\"0 ! important\"\n          >\n            {h.name}\n          </Button>\n        ))}\n      </Stack>\n    </Container>\n  )\n}","import React from 'react'\nimport { Container } from '@chakra-ui/react'\nimport ENSReverse from './ENSReverse'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (\n  <Container className=\"App\">\n    <ENSReverse/>\n  </Container>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}