{"version":3,"sources":["ENSReverse.tsx","App.tsx","index.tsx"],"names":["ethereum","window","web3","Web3","logger","css","args","splice","console","log","apply","onboarding","MetamaskOnboarding","params","useParams","useState","name","setName","self","net","revRegistrar","rev","owner","address","revOwner","resolver","revName","titles","setTitles","addrs","setAddrs","tracts","setTracts","toast","useToast","updateAddr","obj","as","updateTract","ts","reset","on","accts","useEffect","undefined","handlers","func","startOnboarding","if","isMetaMaskInstalled","stopOnboarding","err","warn","a","request","method","addresses","addr","eth","getChainId","chainId","Error","revAddr","substr","ens","getOwner","getResolver","test","options","getAddress","Contract","revRegistrarABI","methods","defaultResolver","call","revResolver","node","alert","claim","send","from","localeCompare","sensitivity","confirm","maxW","justify","justifyItems","m","mr","alignSelf","w","textAlign","value","onChange","evt","target","templateColumns","alignItems","Object","entries","map","i","key","title","onCopy","useClipboard","display","sx","bg","pr","minW","textOverflow","whiteSpace","onClick","duration","size","Copy","h","error","message","disabled","mt","path","component","ENSReverse","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"4nBAiBQA,EAAaC,OAAbD,SACFE,EAAO,IAAIC,IAAKH,GAEhBI,EAAS,SAACC,GAAD,OACb,WAAyB,IAAD,uBAApBC,EAAoB,yBAApBA,EAAoB,gBACtBA,EAAK,GAAL,aAAgBA,EAAK,GAArB,KACAA,EAAKC,OAAO,EAAG,EAAGF,GAClBG,QAAQC,IAAIC,MAAM,EAAMJ,KA4Bb,aACb,IAAMK,EAAa,IAAIC,IACjBC,EAASC,cAFI,EAGKC,mBACtBF,EAAOG,MAAQ,yBAJE,mBAGZA,EAHY,KAGNC,EAHM,OAMSF,mBAAS,CACnCG,KAAM,eACNC,IAAK,kBACLC,aAAc,4BACdC,IAAK,kBACLC,MAAO,KACPC,QAAS,KACTC,SAAS,uBACTC,SAAU,mBACVC,QAAS,mBAfQ,mBAMZC,EANY,KAMJC,EANI,OAiBOb,mBAAoB,IAjB3B,mBAiBZc,EAjBY,KAiBLC,EAjBK,OAkBSf,mBAAoB,IAlB7B,mBAkBZgB,EAlBY,KAkBJC,EAlBI,KAmBbC,EAAQC,cAERC,EAAa,SAACC,GAClBN,GAAS,SAAAO,GAAE,kCAAUA,GAAOD,OAExBE,EAAc,SAACF,GACnBJ,GAAU,SAAAO,GAAE,kCAAUA,GAAOH,OAGzBI,EAAQ,WACZV,EAAS,IACTE,EAAU,KAEJ,OAARhC,QAAQ,IAARA,KAAUyC,GAAG,eAAgBD,GACrB,OAARxC,QAAQ,IAARA,KAAUyC,GAAG,mBACX,SAACC,GACCF,IACAL,EAAW,CAAEjB,KAAMwB,EAAM,QAI7BC,qBAAU,WACRf,GAAU,SAACW,GAAD,mBAAC,eAEJA,GAFG,IAGNjB,MAAM,GAAD,OAAKN,EAAL,UACLO,QAAQ,GAAD,OAAKP,EAAL,iBAGXc,GAAS,SAACO,GAAD,mBAAC,eACHA,GADE,IACEf,WAAOsB,EAAWrB,aAASqB,SAErC,CAAC5B,IAEJ,IAAM6B,EAAW,CACf,CACE7B,KAAM,mBACN8B,KAAM,kBAAMnC,EAAWoC,mBACvBC,GAAI,kBAAOpC,IAAmBqC,wBAEhC,CACEjC,KAAM,kBACN8B,KAAM,WAAQ,IACZnC,EAAWuC,iBACX,MAAMC,GACN3C,QAAQ4C,KAAKD,KAEfH,GAAI,kBAAOpC,IAAmBqC,wBAEhC,CACEjC,KAAM,6BACN8B,KAAK,WAAD,4BAAE,gCAAAO,EAAA,6DACE5C,EAAML,EAAO,kBACf,4BAFA,gBAIFJ,QAJE,IAIFA,OAJE,EAIFA,EAAUsD,QAAQ,CAAEC,OAAQ,wBAJ1B,OAGEC,EAHF,OAMEC,EANF,OAMSD,QANT,IAMSA,OANT,EAMSA,EAAY,GACzB/C,EAAI,iBAAkBgD,GACtBtB,EAAW,CAAEjB,KAAMuC,IARf,2CAAF,kDAAC,GAULT,GAAI,mBAAShD,IAAa6B,EAAMX,OAElC,CACEF,KAAM,iBACN8B,KAAK,WAAD,4BAAE,wCAAAO,EAAA,6DACE5C,EAAML,EAAO,2CADf,SAGc,sBAAC,4BAAAiD,EAAA,sEACKnD,EAAKwD,IAAIC,aADd,OACXC,EADW,YAEVA,EAFU,OAGV,IAHU,OAIV,IAJU,OAKV,IALU,OAMV,IANU,OAOV,KAPU,QAQV,MARU,iDAGA,WAHA,gCAIA,UAJA,gCAKA,WALA,gCAMA,WANA,iCAOC,SAPD,iCAQE,QARF,uDASgBA,EAThB,iDAAD,GAHd,UAGEzC,EAHF,OAeJV,EAAI,oBAAqBU,GACzBgB,EAAW,CAAEhB,QAETU,EAAMX,KAlBN,sBAkBkB,IAAI2C,MAAM,0BAlB5B,cAmBEC,EAnBF,UAoBCjC,EAAMX,KAAK6C,OAAO,GApBnB,iBAsBJtD,EAAI,yBAA0BqD,GAC9B3B,EAAW,CAAEd,IAAKyC,IAElBrD,EAAI,iCAzBA,UA2BIP,EAAKwD,IAAIM,IAAIC,SAAS,gBA3B1B,WA0BE7C,EA1BF,OA6BJX,EAAI,SAAUW,GACVA,EA9BA,uBA+BI,IAAIyC,MAAM,uCA/Bd,eAiCJpD,EAAI,SAAUW,GACde,EAAW,CAAEf,iBAlCT,UAoCmBlB,EAAKwD,IAAIM,IAAIC,SAASH,GApCzC,eAoCEtC,EApCF,OAqCJW,EAAW,CAAEX,aArCT,UAuCmBtB,EAAKwD,IAAIM,IAAIE,YAAYlD,GAvC5C,WAuCES,EAvCF,QAwCD,SAAS0C,KAAK1C,EAAS2C,QAAQ7C,SAxC9B,iBAyCFY,EAAW,CAAEZ,QAAS,KAAMD,MAAO,OAzCjC,yCA2CoBpB,EAAKwD,IAAIM,IAAIK,WAAWrD,GA3C5C,eA2CIO,EA3CJ,YA4CFY,EA5CE,KA6CAZ,EA7CA,UA8CarB,EAAKwD,IAAIM,IAAIC,SAAS1C,GA9CnC,0BA6CAA,QA7CA,KA8CAD,MA9CA,iEAAF,kDAAC,GAkDL0B,GAAI,mBACAnB,EAAMX,QAELW,EAAMV,UACcyB,IAAlBf,EAAMN,cACUqB,IAAhBf,EAAMP,SAIf,CACEN,KAAM,iBACN8B,KAAK,WAAD,4BAAE,wCAAAO,EAAA,yDACE5C,EAAML,EAAO,6CAEfyB,EAAMT,aAHN,sBAII,IAAIyC,MAAM,qCAJd,cAMEzC,EAAe,IAAIlB,EAAKwD,IAAIY,SAChCC,IAA8B1C,EAAMT,cAEtCX,EAAI,oBAAqBW,EAAagD,QAAQ7C,SAC9Ce,EAAY,CAAElB,iBAVV,SAaFA,EAAaoD,QAAQC,kBAAkBC,OAbrC,UAYED,EAZF,OAeJtC,EAAW,CAAEsC,oBAET5C,EAAMR,IAjBN,uBAkBI,IAAIwC,MAAM,8BAlBd,yBAqBF3D,EAAKwD,IAAIM,IAAIE,YAAYrC,EAAMR,KArB7B,WAoBEsD,EApBF,OAuBJrC,EAAY,CAAEqC,gBACRlD,EAAWkD,EAAYP,QAAQ7C,QACrCY,EAAW,CAAEV,cAEV,SAAS0C,KAAK1C,GA3Bb,iBA4BFU,EAAW,CAAET,QAAS,OA5BpB,yCA+BAN,EAAaoD,QAAQI,KAAK/C,EAAMX,MAAMwD,OA/BtC,eA8BIE,EA9BJ,iBAkCMD,EAAYH,QAAQxD,KAAK4D,GAAMF,OAlCrC,QAiCIhD,EAjCJ,OAoCFS,EAAW,CAAET,QAAO,OAAEA,QAAF,IAAEA,IAAW,OApC/B,4CAAF,kDAAC,GAuCLsB,GAAI,mBACAnB,EAAMT,gBAELW,EAAOX,eACJW,EAAO4C,eAIjB,CACE3D,KAAM,4BACN8B,KAAK,WAAD,4BAAE,sBAAAO,EAAA,yDACDxB,EAAML,WAAaK,EAAMX,KADxB,yCAEK2D,MAAM,0DAAD,OAERhD,EAAMX,KAFE,OAFV,UAQAa,EAAOX,aARP,sBASI,IAAIyC,MAAM,sCATd,uBAYF9B,EAAOX,aACNoD,QAAQM,MAAMjD,EAAMX,MACpB6D,KAAK,CAAEC,KAAMnD,EAAMX,OACnBuB,GAAG,gBAAgB,WAClBN,EAAW,CAAEX,SAAU,OACvBc,EAAY,CAAEqC,YAAa,UAjB3B,2CAAF,kDAAC,GAqBL3B,GAAI,2BACF,SAASmB,KAAT,UAActC,EAAML,gBAApB,QAAgC,OAC3BO,EAAOX,gBACT,UAACS,EAAML,gBAAP,aAAC,EAAgByD,cAAhB,UACFpD,EAAMX,YADJ,QACY,GAAI,KAAM,CAAEgE,YAAa,YAI7C,CACElE,KAAM,oBACN8B,KAAK,WAAD,4BAAE,8BAAAO,EAAA,yDACDxB,EAAMH,UAAYV,EADjB,yCAEK6D,MAAM,2BAAD,OAA4B7D,KAFtC,UAKDa,EAAMH,UACJzB,OAAOkF,QAAP,oBAA4BtD,EAAMH,QAAlC,MAND,oBAQEK,EAAOX,aART,sBASM,IAAIyC,MAAM,6BAThB,uBAYA9B,EAAOX,aAAaoD,QACnBvD,QAAQD,GACR+D,KAAK,CAAEC,KAAMnD,EAAMX,OAdpB,UAiBEa,EAAO4C,YAjBT,sBAkBM,IAAId,MAAM,4BAlBhB,wBAqBA9B,EAAOX,aAAaoD,QACnBI,KAAK/C,EAAMX,MACXwD,OAvBD,eAoBIE,EApBJ,iBA0BA7C,EAAO4C,YAAYH,QAAQxD,KAAK4D,GAAMF,OA1BtC,QAyBIhD,EAzBJ,OA4BFS,EAAW,CAAET,YA5BX,4CAAF,kDAAC,GA+BLsB,GAAI,wBACD,SAASmB,KAAT,UAActC,EAAML,gBAApB,QAAgC,OAC5BO,EAAO4C,eACP5C,EAAOX,gBAKlB,OACE,eAAC,IAAD,CAAWgE,KAAK,OAAhB,UACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAMC,QAAQ,SAASC,aAAa,SAApC,UACE,cAAC,IAAD,CAAMC,EAAG,EAAGC,GAAI,EAAGC,UAAU,SAA7B,0CACA,cAAC,IAAD,CACEC,EAAE,OACFC,UAAU,SACVC,MAAO5E,EACP6E,SAAU,SAAAC,GAAG,OAAI7E,EAAQ6E,EAAIC,OAAOH,aAGxC,cAAC,IAAD,CAAMI,gBAAgB,WAAWC,WAAW,SAA5C,SACGC,OAAOC,QAAQxE,GAAQyE,KAAI,WAAeC,GAAO,IAAD,qBAAnBC,EAAmB,KAAdC,EAAc,KACvCC,EAAWC,YAAY,UAAC5E,EAAMyE,UAAP,QAAe,IAAtCE,OACR,OACE,eAAC,IAAD,CAAaE,QAAQ,WAAWC,GAAI,CAAE,cAAe,CAAEC,GAAI,cAA3D,UACE,eAAC,IAAD,CAAMrB,EAAG,EAAGI,UAAU,QAAQkB,GAAI,EAAGC,KAAK,OAA1C,UAAkDP,EAAlD,OACA,eAAC,IAAD,CAAMhB,EAAG,EAAGwB,aAAa,OAAOC,WAAW,SAAST,MAAO1E,EAAMyE,GAAjE,UACGzE,EAAMyE,IACL,cAAC,IAAD,CACEC,MAAM,OACNU,QAAS,WACPT,IACAvE,EAAM,CACJsE,MAAO,eACPW,SAAU,QAGd1B,GAAI,EACJ2B,KAAK,KAVP,SAYE,cAACC,EAAA,EAAD,MAGJ,+BACkB,OAAfvF,EAAMyE,GAAgB,uCAAiBzE,EAAMyE,UApB1CD,WA4BlB,cAAC,IAAD,UACGxD,EAASuD,KAAI,SAACiB,EAAGhB,GAAJ,OACZ,cAAC,IAAD,CAEEY,QAAO,sBAAE,sBAAA5D,EAAA,+EAECgE,EAAEvE,OAFH,sDAILtC,QAAQ8G,MAAR,MACAzC,MAAM,KAAI0C,SALL,wDAQTC,WAAUH,EAAErE,KAAMqE,EAAErE,KACpBuC,EAAG,EAAGkC,GAAG,gBAXX,SAaGJ,EAAErG,MAZEqF,YCpWF,oBACb,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOqB,KAAK,UAAUC,UAAWC,SCLvCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAACC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.c1134e4a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport Web3 from 'web3'\nimport MetamaskOnboarding from '@metamask/onboarding'\nimport {\n  Stack, Input, Container, Flex, Button, Text, Box, Grid, useClipboard, useToast,\n} from '@chakra-ui/react'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { abi as revRegistrarABI } from '@ensdomains/ens-contracts/artifacts/contracts/registry/ReverseRegistrar.sol/ReverseRegistrar.json'\nimport { useParams } from 'react-router-dom'\nimport { CopyIcon } from '@chakra-ui/icons'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n  }\n}\nconst { ethereum } = window\nconst web3 = new Web3(ethereum)\n\nconst logger = (css: string) => (\n  (...args: unknown[]) => {\n    args[0] = `%c ${args[0]} `\n    args.splice(1, 0, css)\n    console.log.apply(this, args)\n  }\n)\n\ninterface Addresses extends Partial<Record<string, string>> {\n  self?: string\n  address?: string\n  owner?: string\n  rev?: string\n  net?: string\n  resolver?: string\n  revRegistrar?: string\n  ens?: string\n  defaultResolver?: string\n  revOwner?: string\n  revName?: string\n}\n\ninterface Contracts {\n  revResolver?: Contract\n  revRegistrar?: Contract\n}\n\ninterface Parameters {\n  name?: string\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const onboarding = new MetamaskOnboarding()\n  const params = useParams<Parameters>()\n  const [name, setName] = useState(\n    params.name || 'subdomain.ensname.eth'\n  )\n  const [titles, setTitles] = useState({\n    self: 'Your Address',\n    net: 'Current Network',\n    revRegistrar: 'Reverse Registrar Address',\n    rev: 'Reverse Address',\n    owner: null as string | null,\n    address: null as string | null,\n    revOwner: `Reverse Lookup Owner`,\n    resolver: 'Resolver Address',\n    revName: 'Reverse Lookup',\n  })\n  const [addrs, setAddrs] = useState<Addresses>({})\n  const [tracts, setTracts] = useState<Contracts>({})\n  const toast = useToast()\n\n  const updateAddr = (obj: object) => {\n    setAddrs(as => ({ ...as, ...obj }))\n  }\n  const updateTract = (obj: object) => {\n    setTracts(ts => ({ ...ts, ...obj }))\n  }\n\n  const reset = () => {\n    setAddrs({})\n    setTracts({})\n  }\n  ethereum?.on('chainChanged', reset)\n  ethereum?.on('accountsChanged',\n    (accts: string[]) => {\n      reset()\n      updateAddr({ self: accts[0] })\n    }\n  )\n\n  useEffect(() => {\n    setTitles((ts) => (\n      {\n        ...ts,\n        owner: `${name} Owner`,\n        address: `${name} Address`,\n      }\n    ))\n    setAddrs((as) => (\n      { ...as, owner: undefined, address: undefined }\n    ))\n  }, [name])\n\n  const handlers = [\n    {\n      name: 'Install MetaMask',\n      func: () => onboarding.startOnboarding(),\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Stop Onboarding',\n      func: () => { try {\n        onboarding.stopOnboarding()\n      } catch(err) {\n        console.warn(err)\n      } },\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Connect To Ethereum Wallet',\n      func: async () => {\n        const log = logger('color: purple')\n        log('Enabling Inpage Provider')\n        const addresses = await (\n          ethereum?.request({ method: 'eth_requestAccounts' })\n        )\n        const addr = addresses?.[0]\n        log('Wallet Address', addr)\n        updateAddr({ self: addr })\n      },\n      if: () => (!!ethereum && !addrs.self),\n    },\n    {\n      name: 'Load Addresses',\n      func: async () => {\n        const log = logger('color: orange; background-color: purple')\n\n        const net = await (async () => {\n          const chainId = await web3.eth.getChainId()\n          switch(chainId) {\n            case 1: return 'mainnet'\n            case 2: return 'Morden'\n            case 3: return 'Ropsten'\n            case 4: return 'Rinkeby'\n            case 42: return 'Kovan'\n            case 100: return 'xDAI'\n            default: return `unknown (id:${chainId})`\n          }\n        })()\n        log('Setting addrs.net', net)\n        updateAddr({ net })\n\n        if(!addrs.self) throw new Error('Wallet Address Not Set')\n        const revAddr = (\n          `${addrs.self.substr(2)}.addr.reverse`\n        )\n        log('Adding Reverse Address', revAddr)\n        updateAddr({ rev: revAddr })\n\n        log('Looking Up addr.reverse Owner')\n        const revRegistrar = (\n          await web3.eth.ens.getOwner('addr.reverse')\n        )\n        log('revReg', revRegistrar)\n        if(!revRegistrar) {\n          throw new Error(\"Couldn't resolve reverse registrar.\")\n        }\n        log('revReg', revRegistrar)\n        updateAddr({ revRegistrar })\n\n        const revOwner = await web3.eth.ens.getOwner(revAddr)\n        updateAddr({ revOwner })\n\n        const resolver = await web3.eth.ens.getResolver(name)\n        if(/^0x0+$/.test(resolver.options.address)) {\n          updateAddr({ address: null, owner: null })\n        } else {\n          const address = await web3.eth.ens.getAddress(name)\n          updateAddr({\n            address,\n            owner: await web3.eth.ens.getOwner(address),\n          })\n        }\n      },\n      if: () => (\n        !!addrs.self\n        && (\n          !addrs.net\n          || addrs.address === undefined\n          || addrs.owner === undefined\n        )\n      ),\n    },\n    {\n      name: 'Load Contracts',\n      func: async () => {\n        const log = logger('color: lightgray; background-color: black')\n\n        if(!addrs.revRegistrar) {\n          throw new Error('Reverse Registrar Address Not Set')\n        }\n        const revRegistrar = new web3.eth.Contract(\n          revRegistrarABI as AbiItem[], addrs.revRegistrar\n        )\n        log('Reverse Registrar', revRegistrar.options.address)\n        updateTract({ revRegistrar })\n\n        const defaultResolver = await (\n          revRegistrar.methods.defaultResolver().call()\n        )\n        updateAddr({ defaultResolver })\n\n        if(!addrs.rev) {\n          throw new Error('Reverse Address Is Not Set')\n        }\n        const revResolver = await (\n          web3.eth.ens.getResolver(addrs.rev)\n        )\n        updateTract({ revResolver })\n        const resolver = revResolver.options.address\n        updateAddr({ resolver })\n\n        if(/^0x0+$/.test(resolver)) {\n          updateAddr({ revName: null })\n        } else {\n          const node = await (\n            revRegistrar.methods.node(addrs.self).call()\n          )\n          const revName = (\n            await revResolver.methods.name(node).call()\n          )\n          updateAddr({ revName: revName ?? null })\n        }\n      },\n      if: () => (\n        !!addrs.revRegistrar\n        && (\n          !tracts.revRegistrar\n          || !tracts.revResolver\n        )\n      ),\n    },\n    {\n      name: 'Claim the Reverse Address',\n      func: async () => {\n        if(addrs.revOwner === addrs.self) {\n          return alert(\n            `This account has already claimed its reverse address. (${\n              addrs.self\n            })`\n          )\n        }\n        if(!tracts.revRegistrar) {\n          throw new Error('Reverse Registrar Contract Not Set')\n        }\n        await (\n          tracts.revRegistrar\n          .methods.claim(addrs.self)\n          .send({ from: addrs.self })\n          .on('confirmation', () => {\n            updateAddr({ revOwner: null })\n            updateTract({ revResolver: null })\n          })\n        )\n      },\n      if: () => (\n        /^0x0+$/.test(addrs.revOwner ?? '')\n        && !!tracts.revRegistrar\n        && !addrs.revOwner?.localeCompare(\n          addrs.self ?? '', 'en', { sensitivity: 'base' }\n        )\n      )\n    },\n    {\n      name: 'Link Reverse Name',\n      func: async () => {\n        if(addrs.revName === name) {\n          return alert(`Reverse Already Set To: ${name}`)\n        }\n        if(\n          !addrs.revName\n          || window.confirm(`Overwrite ${addrs.revName}?`)\n        ) {\n          if(!tracts.revRegistrar) {\n            throw new Error('Reverse Registrar Not Set')\n          }\n          await (\n            tracts.revRegistrar.methods\n            .setName(name)\n            .send({ from: addrs.self })\n          )\n\n          if(!tracts.revResolver) {\n            throw new Error('Reverse Resolver Not Set')\n          }\n          const node = await (\n            tracts.revRegistrar.methods\n            .node(addrs.self)\n            .call()\n          )\n          const revName = await (\n            tracts.revResolver.methods.name(node).call()\n          )\n          updateAddr({ revName })\n        }\n      },\n      if: () => (\n        !/^0x0+$/.test(addrs.revOwner ?? '')\n        && !!tracts.revResolver\n        && !!tracts.revRegistrar\n      )\n    }\n  ]\n\n  return (\n    <Container maxW=\"100%\">\n      <Stack>\n        <Flex justify=\"center\" justifyItems=\"center\">\n          <Text m={0} mr={2} alignSelf=\"center\">ENS Name For Reverse Record:</Text>\n          <Input\n            w=\"auto\"\n            textAlign=\"center\"\n            value={name}\n            onChange={evt => setName(evt.target.value)}\n          />\n        </Flex>\n        <Grid templateColumns=\"auto 1fr\" alignItems=\"center\">\n          {Object.entries(titles).map(([key, title], i) => {\n            const { onCopy } = useClipboard(addrs[key] ?? '')\n            return (\n              <Box key={i} display=\"contents\" sx={{ '&:hover > *': { bg: '#FBFF0522' } }}>\n                <Text m={0} textAlign=\"right\" pr={5} minW=\"12em\">{title}:</Text>\n                <Text m={0} textOverflow=\"clip\" whiteSpace=\"nowrap\" title={addrs[key]}>\n                  {addrs[key] && (\n                    <Button\n                      title=\"Copy\"\n                      onClick={() => {\n                        onCopy()\n                        toast({\n                          title: 'Value Copied',\n                          duration: 1500,\n                        })\n                      }}\n                      mr={2}\n                      size=\"xs\"\n                    >\n                      <CopyIcon/>\n                    </Button>\n                  )}\n                  <code>\n                    {addrs[key] === null ? <em>Unset</em> : addrs[key]}\n                  </code>\n                </Text>\n              </Box>\n            )\n          })}\n        </Grid>\n      </Stack>\n      <Stack>\n        {handlers.map((h, i) => (\n          <Button\n            key={i}\n            onClick={async () => {\n              try {\n                await h.func()\n              } catch(err) {\n                console.error(err)\n                alert(err.message)\n              }\n            }}\n            disabled={h.if ? !h.if() : false}\n            m={0} mt=\"0 ! important\"\n          >\n            {h.name}\n          </Button>\n        ))}\n      </Stack>\n    </Container>\n  )\n}","import {\n  HashRouter as Router, Switch, Route,\n} from 'react-router-dom'\nimport { Container } from '@chakra-ui/react'\nimport ENSReverse from './ENSReverse'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (\n  <Router>\n    <Switch>\n      <Route path='/:name?' component={ENSReverse}/>\n    </Switch>\n  </Router>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}