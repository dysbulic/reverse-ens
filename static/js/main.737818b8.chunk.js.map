{"version":3,"sources":["ENSReverse.tsx","App.tsx","index.tsx"],"names":["ethereum","window","web3","Web3","logger","css","args","splice","console","log","apply","namehash","name","node","repeat","labels","split","i","length","utils","sha3","slice","toString","NET","Ropsten","ens","resolve","mainnet","Rinkeby","onboarding","MetamaskOnboarding","useState","setName","tld","setTLD","self","net","rev","reg","revReg","owner","revOwn","revLook","titles","setTitles","addrs","setAddrs","tracts","setTracts","updateAddr","key","val","as","on","accts","useEffect","ts","handlers","func","startOnboarding","if","isMetaMaskInstalled","stopOnboarding","err","warn","a","enable","addr","parseInt","networkVersion","Object","assign","substr","eth","getAddress","resolverAddress","publicResolver","Contract","resolverABI","methods","call","revRes","register","send","from","setResolver","claim","value","onChange","evt","target","templateColumns","entries","map","title","m","h","onClick","disabled","py","mt","className","ENSReverse","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.737818b8.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Web3 from 'web3'\n// To replace window.ethereum:\n// import { initProvider } from '@metamask/inpage-provider'\n// import * as LocalMessageDuplexStream from 'post-message-stream'\nimport MetamaskOnboarding from '@metamask/onboarding'\nimport {\n  Stack, Input, Container, Flex, UnorderedList, ListItem,\n  Button, Text, Box, Grid,\n} from '@chakra-ui/react'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { abi as resolverABI } from '@ensdomains/ens-contracts/artifacts/contracts/resolvers/Resolver.sol/Resolver.json'\nimport {\n  ensABI, registrarABI, reverseRegistrarABI,\n} from './abi'\nimport { useEffect } from 'react'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n  }\n}\nconst { ethereum } = window\nconst web3 = new Web3(ethereum)\n\nconst logger = (css: string) => (\n  (...args: unknown[]) => {\n    args[0] = `%c ${args[0]} `\n    args.splice(1, 0, css)\n    console.log.apply(this, args)\n  }\n)\n\nconst namehash = (name: string) => {\n  let node = `0x${'0'.repeat(64)}`\n  if(name !== '') {\n    const labels = name.split('.')\n    for(let i = labels.length - 1; i >= 0; i--) {\n      node = (\n        web3.utils.sha3(\n          node + (web3.utils.sha3(labels[i]) ?? '').slice(2)\n        )\n        ?? ''\n      )\n    }\n  }\n  return node.toString()\n}\n\nconst NET: Record<string, Record<string, string>> = {\n  Ropsten: {\n    ens: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n    resolve: '0x4c641fb9bad9b60ef180c31f56051ce826d21a9a',\n  },\n  mainnet: {\n    ens: '0x314159265dd8dbb310642f98f50c066173c1259b',\n    resolve: '0xe7410170f87102df0055eb195163a03b7f2bff4a',\n  },\n  Rinkeby: {\n    ens: '0xe7410170f87102df0055eb195163a03b7f2bff4a'\n  },\n}\n\ninterface Addresses extends Partial<Record<string, string>> {\n  self?: string\n  owner?: string\n  rev?: string\n  net?: string\n  resolver?: string\n  ens?: string\n  resolve?: string\n  revOwn?: string\n}\n\ninterface Contracts {\n  revRes?: Contract\n  ens?: Contract\n  reg?: Contract\n  revReg?: Contract\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const onboarding = new MetamaskOnboarding()\n  const [name, setName] = useState('dhappy')\n  const [tld, setTLD] = useState('eth')\n  const [titles, setTitles] = useState({\n    self: 'Your Address',\n    net: 'Current Network',\n    rev: 'Reverse Address',\n    ens: 'ENS Address',\n    reg: 'Registrar Address',\n    revReg: 'Reverse Registrar Address',\n    owner: `${name}.${tld} Owner`,\n    revOwn: `Reverse Lookup Owner`,\n    resolve: 'Resolver Address',\n    revLook: 'Reverse Lookup',\n  })\n  const [addrs, setAddrs] = useState<Addresses>({})\n  const [tracts, setTracts] = useState<Contracts>({})\n\n  const updateAddr = (key: string, val: string) => {\n    setAddrs(as => ({ ...as, [key]: val }))\n  }\n\n  ethereum.on('networkChanged', () => {\n    setAddrs({})\n    setTracts({})\n  })\n  ethereum.on('accountsChanged', (accts: string[]) => (\n    updateAddr('self', accts[0])\n  ))\n\n  useEffect(() => {\n    setTitles((ts) => (\n      { ...ts, owner: `${name}.${tld} Owner` }\n    ))\n  }, [name, tld])\n\n  const handlers = [\n    {\n      name: 'Install MetaMask',\n      func: () => onboarding.startOnboarding(),\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Stop Onboarding',\n      func: () => { try {\n        onboarding.stopOnboarding()\n      } catch(err) {\n        console.warn(err)\n      } },\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Enable Ethereum on this Site',\n      func: async () => {\n        const log = logger('color: purple')\n        log('Enabling Inpage Provider')\n        const addr = (await ethereum.enable())[0]\n        updateAddr('self', addr)\n        log('Wallet Address', addr)\n      },\n      if: () => (!addrs.self),\n    },\n    {\n      name: 'Load Addresses',\n      func: async () => {\n        const log = logger('color: orange; background-color: purple')\n\n        log('Setting addrs.net')\n        const net = (() => {\n          switch(parseInt(ethereum.networkVersion)) {\n            case 1: return 'mainnet'\n            case 2: return 'Morden'\n            case 3: return 'Ropsten'\n            case 4: return 'Rinkeby'\n            case 42: return 'Kovan'\n            case 100: return 'xDAI'\n            default: return `unknown (id:${ethereum.networkVersion})`\n          }\n        })()\n        updateAddr('net', net)\n        log('OBJ', Object.assign({}, NET[net]))\n        setAddrs(as => Object.assign({}, as, NET[net]))\n      \n        log('Adding Reverse Address')\n        updateAddr(\n          'rev',\n          `${(addrs.self ?? '').substr(2)}.addr.reverse`\n        )\n      },\n      if: () => !!addrs.self && !addrs.net,\n    },\n    {\n      name: 'Load Contracts',\n      func: async () => {\n        const log = logger('color: lightgray; background-color: black')\n\n        log('Looking Up Owner of resolver.eth')\n        const resolverAddress = (\n          await web3.eth.ens.getAddress('resolver.eth')\n        )\n        updateAddr('resolver', resolverAddress)\n        log('Owner', resolverAddress)\n\n        const publicResolver = new web3.eth.Contract(\n          resolverABI as AbiItem[], resolverAddress\n        )\n        let name = await (\n          publicResolver.methods.name(namehash(addrs.rev ?? ''))\n          .call()\n        )\n        log('name', name, addrs.rev)\n        // updateAddr('revLook', name)\n\n        // log(`Looking Up Owner of ${tld}`)\n        // const registrarAddress = await ens.methods.owner(namehash(tld)).call()\n        // updateAddr('reg', registrarAddress)\n        // log('Owner', registrarAddress)\n  \n        // log('Creating ENS and Regisrtar Contracts')\n        // const registrar = new web3.eth.Contract(registrarAbi, registrarAddress)\n        // log('Contracts Completed', `ens:${ens}`, `reg:${registrar}`)\n  \n        // log(`Looking Up Owner of addr.reverse`)\n        // const reverseRegistarAddr = await ens.methods.owner(namehash('addr.reverse')).call()\n        // updateAddr('revReg', reverseRegistarAddr)\n        // log('Owner', reverseRegistarAddr)\n  \n        // log(`Creating a Reverse Resolver (${addrs.rev})`)\n        // const reverseResolverAddr = await ens.methods.resolver(namehash(addrs.rev)).call()\n        // log(reverseResolverAddr) // null\n        // const reverseResolver = new web3.eth.Contract(publicResolverAbi, reverseResolverAddr)\n        // // let name = await reverseResolver.methods.name(namehash(addrs.rev)).call()\n        // // updateAddr('revLook', name)\n        // // console.log('Got Reverse Lookup', name)\n  \n        // log(`Looking Up Owner of ${addrs.rev}`)\n        // let owner = await ens.methods.owner(namehash(addrs.rev)).call()\n        // updateAddr('revOwn', owner)\n        // log('Owner', owner)\n  \n        // log(`Looking Up Owner of ${name}.${tld}`)\n        // owner = await ens.methods.owner(namehash(`${name}.${tld}`)).call()\n        // updateAddr('owner', owner)\n        // log('Owner', owner)\n  \n        // log('Creating ENS and Regisrtar Contracts')\n        // const registrar = new web3.eth.Contract(registrarAbi, registrarAddress)\n        // log('Contracts Completed', `ens:${ens}`, `reg:${registrar}`)\n\n        // log(`Looking Up Owner of ${tld}`)\n        // const registrarAddress = await ens.methods.owner(namehash(tld)).call()\n        // updateAddr('reg', registrarAddress)\n        // log('Owner', registrarAddress)\n\n        // log('Creating ENS and Regisrtar Contracts')\n        // const registrar = new web3.eth.Contract(registrarAbi, registrarAddress)\n        // log('Contracts Completed', `ens:${ens}`, `reg:${registrar}`)\n\n        // log(`Looking Up Owner of addr.reverse`)\n        // const reverseRegistarAddr = await ens.methods.owner(namehash('addr.reverse')).call()\n        // updateAddr('revReg', reverseRegistarAddr)\n        // log('Owner', reverseRegistarAddr)\n\n        // log(`Creating a Reverse Resolver (${addrs.rev})`)\n        // const reverseResolverAddr = await ens.methods.resolver(namehash(addrs.rev)).call()\n        // log(reverseResolverAddr) // null\n        // const reverseResolver = new web3.eth.Contract(publicResolverAbi, reverseResolverAddr)\n        // // let name = await reverseResolver.methods.name(namehash(addrs.rev)).call()\n        // // updateAddr('revLook', name)\n        // // console.log('Got Reverse Lookup', name)\n\n        // log(`Looking Up Owner of ${addrs.rev}`)\n        // let owner = await ens.methods.owner(namehash(addrs.rev)).call()\n        // updateAddr('revOwn', owner)\n        // log('Owner', owner)\n\n        // log(`Looking Up Owner of ${name}.${tld}`)\n        // owner = await ens.methods.owner(namehash(`${name}.${tld}`)).call()\n        // updateAddr('owner', owner)\n        // log('Owner', owner)\n\n        // log('Caching Contracts')\n        // const reverseRegistrar = new web3.eth.Contract(reverseRegistrarAbi, reverseRegistarAddr)\n        // const tracts = { reg: registrar, ens: ens, revRes: reverseResolver, revReg: reverseRegistrar }\n        // console.log(tracts)\n        // setTracts(t => Object.assign({}, t, tracts))\n        // log('Done')\n      },\n      if: () => !!addrs.net && !tracts.revRes,\n    },\n    {\n      name: `Register: ${name}.${tld}`,\n      func: async () => {\n        if(addrs.owner !== addrs.self) {\n          await tracts.reg?.methods.register(web3.utils.sha3(name), addrs.self).send({ from: addrs.self })\n          let owner = await tracts.ens?.methods.owner(namehash(`${name}.${tld}`)).call()\n          updateAddr('owner', owner)\n        }\n      },\n      if: () => addrs.owner !== addrs.self,\n    },\n    {\n      name: 'Set a Resolver for the New Domain',\n      func: async () => {\n        await tracts.ens?.methods.setResolver(namehash(`${name}.${tld}`), addrs.resolve).send({ from: addrs.self })\n      },\n      if: () => !!tracts.ens && !!addrs.resolve,\n    },\n    {\n      name: 'Claim the Reverse Address',\n      func: async () => {\n        console.log(tracts)\n        if(addrs.revOwn !== addrs.self) {\n          await tracts.revReg?.methods.claim(addrs.self).send({ from: addrs.self })\n          const owner = await tracts.ens?.methods.owner(namehash(addrs.rev ?? '')).call()\n          updateAddr('revOwn', owner)\n        }\n      },\n      if: () => !!addrs.rev && !!tracts.revReg\n    },\n    {\n      name: 'Set Resolver and Link Reverse Name',\n      func: async () => {\n        if(addrs.revLook !== `${name}.${tld}`) {\n          const node = await tracts.revReg?.methods.setName(`${name}.${tld}`).send({ from: addrs.self })\n          // const revLook = await tracts.revRes?.methods.name(namehash(addrs.rev ?? '')).call()\n          // updateAddr('revLook', revLook)\n        }\n      },\n      if: () => !!tracts.ens && !!tracts.revReg\n    }\n  ]\n\n  return (\n    <Container>\n      <Stack>\n        <Flex>\n          <Input\n            value={name}\n            onChange={evt => setName(evt.target.value)}\n          />\n          <Input\n            value={tld}\n            onChange={evt => setTLD(evt.target.value)}\n          />\n        </Flex>\n        <Grid templateColumns=\"repeat(2, 1fr)\">\n          {Object.entries(titles).map(([key, title], i) => (\n            <>\n              <Text m={0}>{title}</Text>\n              <Text m={0}>{addrs[key]}</Text>\n            </>\n          ))}\n        </Grid>\n      </Stack>\n      <Stack>\n        {handlers.map((h, i) => (\n          <Button\n            key={i} onClick={h.func}\n            disabled={h.if ? !h.if() : false}\n            m={0} py={10} mt=\"0 ! important\"\n          >\n            {h.name}\n          </Button>\n        ))}\n      </Stack>\n    </Container>\n  )\n//   // // web3.personal.sign(\n//   // //   web3.fromUtf8(\"Howdy-Ho!\"),\n//   // //   web3.eth.coinbase,\n//   // //   (err, sig) => (err ? console.error(err) : console.log(sig))\n//   // // )\n\n//   // // ABIs from https://github.com/ensdomains/ens-manager/blob/master/src/api/ens.js\n}","import React from 'react'\nimport { Container } from '@chakra-ui/react'\nimport ENSReverse from './ENSReverse'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (\n  <Container className=\"App\">\n    <ENSReverse/>\n  </Container>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}