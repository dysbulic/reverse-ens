{"version":3,"sources":["ENSReverse.tsx","App.tsx","index.tsx"],"names":["ethereum","window","web3","Web3","logger","css","args","splice","console","log","apply","onboarding","MetamaskOnboarding","params","useParams","useState","name","setName","self","net","registrar","reverse","address","resolver","owner","titles","setTitles","addrs","setAddrs","tracts","setTracts","toast","useToast","input","useRef","updateAddr","obj","as","updateTract","ts","reset","useEffect","on","off","resetAndSet","accts","undefined","handlers","func","startOnboarding","if","isMetaMaskInstalled","a","request","method","addresses","addr","eth","getChainId","chainId","Error","substr","ens","getOwner","test","getAddress","message","includes","Contract","registrarABI","options","getResolver","reverseResolver","ensEntry","methods","node","call","resolved","title","description","duration","current","focus","alert","confirm","send","from","maxW","justify","justifyItems","m","mr","alignSelf","w","textAlign","placeholder","value","ref","onChange","evt","target","templateColumns","alignItems","Object","entries","map","i","key","onCopy","useClipboard","display","sx","bg","pr","minW","textOverflow","whiteSpace","size","onClick","Copy","h","error","disabled","mt","path","component","ENSReverse","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"4nBAmBQA,EAAaC,OAAbD,SACFE,EAAO,IAAIC,IAAKH,GAEhBI,EAAS,SAACC,GAAD,OACb,WAAyB,IAAD,uBAApBC,EAAoB,yBAApBA,EAAoB,gBACtBA,EAAK,GAAL,aAAgBA,EAAK,GAArB,KACAA,EAAKC,OAAO,EAAG,EAAGF,GAClBG,QAAQC,IAAIC,MAAM,EAAMJ,KA0Bb,aACb,IAAMK,EAAa,IAAIC,IACjBC,EAASC,cAFI,EAGKC,mBAASF,EAAOG,MAHrB,mBAGZA,EAHY,KAGNC,EAHM,OAISF,mBAAS,CACnCG,KAAM,eACNC,IAAK,kBACLC,UAAW,4BACXC,QAAS,kBACTC,QAAS,KACTC,SAAU,mBACVC,MAAO,uBACPR,KAAM,mBAZW,mBAIZS,EAJY,KAIJC,EAJI,OAcOX,mBAAoB,IAd3B,mBAcZY,EAdY,KAcLC,EAdK,OAeSb,mBAAoB,IAf7B,mBAeZc,EAfY,KAeJC,EAfI,KAgBbC,EAAQC,cACRC,EAAQC,iBAAgC,MAExCC,EAAa,SAACC,GAClBR,GAAS,SAAAS,GAAE,kCAAUA,GAAOD,OAExBE,EAAc,SAACF,GACnBN,GAAU,SAAAS,GAAE,kCAAUA,GAAOH,OAGzBI,EAAQ,WACZZ,EAAS,IACTE,EAAU,KAEZW,qBAAU,WAER,OADQ,OAARzC,QAAQ,IAARA,KAAU0C,GAAG,eAAgBF,GACtB,yBAAMxC,QAAN,IAAMA,OAAN,EAAMA,EAAU2C,IAAI,eAAgBH,MAC1C,IACHC,qBAAU,WACR,IAAMG,EAAc,SAACC,GACnBL,IACAL,EAAW,CAAEjB,KAAM2B,EAAM,MAG3B,OADQ,OAAR7C,QAAQ,IAARA,KAAU0C,GAAG,kBAAmBE,GACzB,yBAAM5C,QAAN,IAAMA,OAAN,EAAMA,EAAU2C,IACrB,kBAAmBC,MAEpB,IAEHH,qBAAU,WACRf,GAAU,SAACa,GAAD,mBAAC,eACJA,GADG,IACCjB,QAASN,EAAI,UAAMA,EAAN,cAAyB,UAEjDY,GAAS,SAACS,GAAD,mBAAC,eACHA,GADE,IACEf,aAASwB,SAEnB,CAAC9B,IAEJ,IAAM+B,EAAW,CACf,CACE/B,KAAM,mBACNgC,KAAM,kBAAMrC,EAAWsC,mBACvBC,GAAI,kBAAOtC,IAAmBuC,wBAEhC,CACEnC,KAAM,0BACNgC,KAAK,WAAD,4BAAE,gCAAAI,EAAA,6DACE3C,EAAML,EAAO,kBACf,4BAFA,gBAIFJ,QAJE,IAIFA,OAJE,EAIFA,EAAUqD,QAAQ,CAAEC,OAAQ,wBAJ1B,OAGEC,EAHF,OAMEC,EANF,OAMSD,QANT,IAMSA,OANT,EAMSA,EAAY,GACzB9C,EAAI,iBAAkB+C,GACtBrB,EAAW,CAAEjB,KAAMsC,IARf,2CAAF,kDAAC,GAULN,GAAI,mBAASlD,IAAa2B,EAAMT,OAElC,CACEF,KAAM,iBACNgC,KAAK,WAAD,4BAAE,oCAAAI,EAAA,6DACE3C,EAAML,EAAO,2CADf,SAGc,sBAAC,4BAAAgD,EAAA,sEACKlD,EAAKuD,IAAIC,aADd,OACXC,EADW,YAEVA,EAFU,OAGV,IAHU,OAIV,IAJU,OAKV,IALU,OAMV,IANU,OAOV,KAPU,QAQV,MARU,iDAGA,WAHA,gCAIA,UAJA,gCAKA,WALA,gCAMA,WANA,iCAOC,SAPD,iCAQE,QARF,uDASgBA,EAThB,iDAAD,GAHd,UAGExC,EAHF,OAeJV,EAAI,uBAAwBU,GAC5BgB,EAAW,CAAEhB,QAETQ,EAAMT,KAlBN,sBAmBI,IAAI0C,MAAM,0BAnBd,cAqBEvC,EArBF,UAsBCM,EAAMT,KAAK2C,OAAO,GAtBnB,iBAwBJpD,EAAI,yBAA0BY,GAC9Bc,EAAW,CAAEd,YAzBT,UA4BInB,EAAKuD,IAAIK,IAAIC,SAAS,gBA5B1B,WA2BE3C,EA3BF,OA8BJX,EAAI,oBAAqBW,GACrBA,IAAa,SAAS4C,KAAK5C,GA/B3B,uBAgCI,IAAIwC,MAAM,sCAhCd,WAkCJzB,EAAW,CAAEf,cAlCT,UAqCEJ,EArCF,uBAsCM,IAAI4C,MAAM,gBAtChB,yBAwCoB1D,EAAKuD,IAAIK,IAAIG,WAAWjD,GAxC5C,eAwCIM,EAxCJ,YAyCFa,EAzCE,KA0CAb,EA1CA,UA2CapB,EAAKuD,IAAIK,IAAIC,SAASzC,GA3CnC,0BA0CAA,QA1CA,KA2CAE,MA3CA,4EA+CA,KAAI0C,QAAQC,SACV,yCAEC,KAAID,QAAQC,SACb,gBAnDF,iBAsDAhC,EAAW,CAAEb,QAAS,KAAME,MAAO,OAtDnC,8FAAF,kDAAC,GA4DL0B,GAAI,mBACAvB,EAAMT,QAELS,EAAMR,MACHQ,EAAMN,UACNM,EAAMP,gBACW0B,IAAlBnB,EAAML,cACUwB,IAAhBnB,EAAMH,SAIf,CACER,KAAM,iBACNgC,KAAK,WAAD,4BAAE,8CAAAI,EAAA,yDACE3C,EAAML,EAAO,6CAEfuB,EAAMP,UAHN,sBAII,IAAIwC,MAAM,qCAJd,UAMExC,EAAY,IAAIlB,EAAKuD,IAAIW,SAC7BC,IAA2B1C,EAAMP,WAEnCX,EAAI,oBAAqBW,EAAUkD,QAAQhD,SAC3CgB,EAAY,CAAElB,cAEVO,EAAMN,QAZN,sBAaI,IAAIuC,MAAM,8BAbd,wBAgBF1D,EAAKuD,IAAIK,IAAIS,YAAY5C,EAAMN,SAhB7B,WAeEmD,EAfF,OAkBJlC,EAAY,CAAEkC,oBAERlD,EAAUkD,EAAgBF,QAAQhD,QACxCa,EAAW,CAAEZ,SAAUD,IAEnBmD,EAAWzD,GAEZ,SAASgD,KAAK1C,GAzBb,iBA0BFa,EAAW,CAAEnB,KAAM,OA1BjB,yCA6BAI,EAAUsD,QAAQC,KAAKhD,EAAMT,MAAM0D,OA7BnC,eA4BID,EA5BJ,iBAgCOH,EAAgBE,QAAQ1D,KAAK2D,GAAMC,OAhC1C,uJAiCG,KAjCH,QA+BIC,EA/BJ,KAmCF1C,EAAW,CAAEnB,KAAM6D,IACf7D,IACFyD,EAAWI,EACX5D,EAAQ4D,GACR9C,EAAM,CACJ+C,MAAO,WACPC,YAAY,+CAAD,OACsCF,EADtC,MAGXG,SAAU,MAEZ,UAAA/C,EAAMgD,eAAN,SAAeC,SA9Cf,YAkDDT,EAlDC,kCAmDqBvE,EAAKuD,IAAIK,IAAIS,YAAYE,GAnD9C,QAmDIlD,EAnDJ,OAoDFe,EAAY,CAAEf,aApDZ,4CAAF,kDAAC,GAuDL2B,GAAI,mBACAvB,EAAMN,gBACeyB,IAAlBnB,EAAML,YAERO,EAAON,WACJM,EAAOT,YACPS,EAAO2C,mBAIjB,CACExD,KAAMA,EAAI,cACDA,EADC,eAGR,iCAEFgC,KAAK,WAAD,4BAAE,4BAAAI,EAAA,yDACApC,GAAQW,EAAMX,OAASA,EADvB,uBAECA,GACDmE,MAAM,2BAAD,OAA4BnE,IAHjC,4BAKKiB,EAAMgD,eALX,aAKK,EAAeC,SALpB,UAQDvD,EAAMX,OACJf,OAAOmF,QAAP,oBAA4BzD,EAAMX,KAAlC,MATD,oBAWEa,EAAOT,UAXT,sBAYM,IAAIwC,MAAM,sCAZhB,uBAeA/B,EAAOT,UAAUsD,QAChBzD,QAAQD,GACRqE,KAAK,CAAEC,KAAM3D,EAAMT,OAjBpB,OAmBFoB,EAAY,CAAEf,cAAUuB,IACxBX,EAAW,CAAEnB,UAAM8B,EAAWtB,WAAOsB,IApBnC,4CAAF,kDAAC,GAuBLI,GAAI,mBACArB,EAAOT,gBACY0B,IAAlBnB,EAAML,cACUwB,IAAhBnB,EAAMH,SAKf,OACE,eAAC,IAAD,CAAW+D,KAAK,OAAhB,UACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAMC,QAAQ,SAASC,aAAa,SAApC,UACE,cAAC,IAAD,CAAMC,EAAG,EAAGC,GAAI,EAAGC,UAAU,SAA7B,0CAGA,cAAC,IAAD,CACEC,EAAE,OAAOC,UAAU,SACnBC,YAAY,sBACZC,MAAK,OAAEhF,QAAF,IAAEA,IAAQ,GAAIiF,IAAKhE,EACxBiE,SAAU,SAACC,GACTlF,EAAQkF,EAAIC,OAAOJ,OACnB7D,EAAW,CAAEb,aAASwB,IACtBR,EAAY,CAAEf,cAAUuB,UAI9B,cAAC,IAAD,CAAMuD,gBAAgB,WAAWC,WAAW,SAA5C,SACGC,OAAOC,QAAQ/E,GAAQgF,KAAI,WAAeC,GAAO,IAAD,qBAAnBC,EAAmB,KAAd7B,EAAc,KACvC8B,EAAWC,YAAY,UAAClF,EAAMgF,UAAP,QAAe,IAAtCC,OACR,OAAI9B,EAEF,eAAC,IAAD,CACUgC,QAAQ,WAChBC,GAAI,CAAE,cAAe,CAAEC,GAAI,cAF7B,UAIE,eAAC,IAAD,CAAMtB,EAAG,EAAGI,UAAU,QAAQmB,GAAI,EAAGC,KAAK,OAA1C,UACGpC,EADH,OAGA,eAAC,IAAD,CAAMY,EAAG,EAAGyB,aAAa,OAAOC,WAAW,SAAStC,MAAOnD,EAAMgF,GAAjE,UACGhF,EAAMgF,IACL,cAAC,IAAD,CACE7B,MAAM,OAAOa,GAAI,EAAG0B,KAAK,KACzBC,QAAS,WACPV,IACA7E,EAAM,CACJ+C,MAAO,eACPE,SAAU,QANhB,SAUE,cAACuC,EAAA,EAAD,MAGJ,+BACkB,OAAf5F,EAAMgF,GACL,uCAEAhF,EAAMgF,UAzBPD,GAHS,aAqCxB,cAAC,IAAD,UACG3D,EAAS0D,KAAI,SAACe,EAAGd,GAAJ,OACZ,cAAC,IAAD,CAEEY,QAAO,sBAAE,sBAAAlE,EAAA,+EAECoE,EAAExE,OAFH,sDAILxC,QAAQiH,MAAR,MACAtC,MAAM,KAAIjB,SALL,wDAQTwD,WAAUF,EAAEtE,KAAMsE,EAAEtE,KACpBwC,EAAG,EAAGiC,GAAG,gBAXX,SAaGH,EAAExG,MAZE0F,YCtWF,oBACb,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOkB,KAAK,UAAUC,UAAWC,SCJvCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAACC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.fb10883e.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport Web3 from 'web3'\nimport MetamaskOnboarding from '@metamask/onboarding'\nimport {\n  Stack, Input, Container, Flex, Button, Text, Box,\n  Grid, useClipboard, useToast,\n} from '@chakra-ui/react'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { abi as registrarABI } from '@ensdomains/ens-contracts/artifacts/contracts/registry/ReverseRegistrar.sol/ReverseRegistrar.json'\nimport { useParams } from 'react-router-dom'\nimport { CopyIcon } from '@chakra-ui/icons'\nimport { useRef } from 'react'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n  }\n}\nconst { ethereum } = window\nconst web3 = new Web3(ethereum)\n\nconst logger = (css: string) => (\n  (...args: unknown[]) => {\n    args[0] = `%c ${args[0]} `\n    args.splice(1, 0, css)\n    console.log.apply(this, args)\n  }\n)\n\ninterface Addresses extends Partial<Record<string, string>> {\n  self?: string\n  address?: string\n  owner?: string\n  reverse?: string\n  net?: string\n  resolver?: string\n  registrar?: string\n  name?: string\n}\n\ninterface Contracts {\n  resolver?: Contract\n  registrar?: Contract\n  reverseResolver?: Contract\n}\n\ninterface Parameters {\n  name?: string\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const onboarding = new MetamaskOnboarding()\n  const params = useParams<Parameters>()\n  const [name, setName] = useState(params.name)\n  const [titles, setTitles] = useState({\n    self: 'Your Address',\n    net: 'Current Network',\n    registrar: 'Reverse Registrar Address',\n    reverse: 'Reverse Address',\n    address: null as string | null,\n    resolver: 'Resolver Address',\n    owner: 'Reverse Lookup Owner',\n    name: 'Reverse Lookup',\n  })\n  const [addrs, setAddrs] = useState<Addresses>({})\n  const [tracts, setTracts] = useState<Contracts>({})\n  const toast = useToast()\n  const input = useRef<HTMLInputElement | null>(null)\n\n  const updateAddr = (obj: object) => {\n    setAddrs(as => ({ ...as, ...obj }))\n  }\n  const updateTract = (obj: object) => {\n    setTracts(ts => ({ ...ts, ...obj }))\n  }\n\n  const reset = () => {\n    setAddrs({})\n    setTracts({})\n  }\n  useEffect(() => {\n    ethereum?.on('chainChanged', reset)\n    return () => ethereum?.off('chainChanged', reset)\n  }, [])\n  useEffect(() => {\n    const resetAndSet = (accts: string[]) => {\n      reset()\n      updateAddr({ self: accts[0] })\n    }\n    ethereum?.on('accountsChanged', resetAndSet)\n    return () => ethereum?.off(\n      'accountsChanged', resetAndSet\n    )\n  }, [])\n\n  useEffect(() => {\n    setTitles((ts) => (\n      { ...ts, address: name ? `${name}'s Address` : null }\n    ))\n    setAddrs((as) => (\n      { ...as, address: undefined }\n    ))\n  }, [name])\n\n  const handlers = [\n    {\n      name: 'Install MetaMask',\n      func: () => onboarding.startOnboarding(),\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Connect Ethereum Wallet',\n      func: async () => {\n        const log = logger('color: purple')\n        log('Enabling Inpage Provider')\n        const addresses = await (\n          ethereum?.request({ method: 'eth_requestAccounts' })\n        )\n        const addr = addresses?.[0]\n        log('Wallet Address', addr)\n        updateAddr({ self: addr })\n      },\n      if: () => (!!ethereum && !addrs.self),\n    },\n    {\n      name: 'Load Addresses',\n      func: async () => {\n        const log = logger('color: orange; background-color: purple')\n\n        const net = await (async () => {\n          const chainId = await web3.eth.getChainId()\n          switch(chainId) {\n            case 1: return 'mainnet'\n            case 2: return 'Morden'\n            case 3: return 'Ropsten'\n            case 4: return 'Rinkeby'\n            case 42: return 'Kovan'\n            case 100: return 'xDAI'\n            default: return `unknown (id:${chainId})`\n          }\n        })()\n        log('Setting Network Name', net)\n        updateAddr({ net })\n\n        if(!addrs.self) {\n          throw new Error('Wallet Address Not Set')\n        }\n        const reverse = (\n          `${addrs.self.substr(2)}.addr.reverse`\n        )\n        log('Adding Reverse Address', reverse)\n        updateAddr({ reverse })\n\n        const registrar = (\n          await web3.eth.ens.getOwner('addr.reverse')\n        )\n        log('Reverse Registrar', registrar)\n        if(!registrar || /^0x0+$/.test(registrar)) {\n          throw new Error(\"Couldn't Resolve Reverse Registrar\")\n        }\n        updateAddr({ registrar })\n\n        try {\n          if(!name) {\n            throw new Error('Name Not Set')\n          }\n          const address = await web3.eth.ens.getAddress(name)\n          updateAddr({\n            address,\n            owner: await web3.eth.ens.getOwner(address),\n          })\n        } catch(err) {\n          if(\n            err.message.includes(\n              'does not implement requested method'\n            )\n            || err.message.includes(\n              'Name Not Set'\n            )\n          ) {\n            updateAddr({ address: null, owner: null })\n          } else {\n            throw err\n          }\n        }\n      },\n      if: () => (\n        !!addrs.self\n        && (\n          !addrs.net\n          || !addrs.reverse\n          || !addrs.registrar\n          || addrs.address === undefined\n          || addrs.owner === undefined\n        )\n      ),\n    },\n    {\n      name: 'Load Contracts',\n      func: async () => {\n        const log = logger('color: lightgray; background-color: black')\n\n        if(!addrs.registrar) {\n          throw new Error('Reverse Registrar Address Not Set')\n        }\n        const registrar = new web3.eth.Contract(\n          registrarABI as AbiItem[], addrs.registrar\n        )\n        log('Reverse Registrar', registrar.options.address)\n        updateTract({ registrar })\n\n        if(!addrs.reverse) {\n          throw new Error('Reverse Address Is Not Set')\n        }\n        const reverseResolver = await (\n          web3.eth.ens.getResolver(addrs.reverse)\n        )\n        updateTract({ reverseResolver })\n\n        const address = reverseResolver.options.address\n        updateAddr({ resolver: address })\n\n        let ensEntry = name\n\n        if(/^0x0+$/.test(address)) {\n          updateAddr({ name: null })\n        } else {\n          const node = await (\n            registrar.methods.node(addrs.self).call()\n          )\n          const resolved = (\n            (await reverseResolver.methods.name(node).call())\n            ?? null\n          )\n          updateAddr({ name: resolved })\n          if(!name) {\n            ensEntry = resolved\n            setName(resolved)\n            toast({\n              title: 'Set Name',\n              description: (\n                `Defaulting name to current reverse record: \"${resolved}\".`\n              ),\n              duration: 3000,\n            })\n            input.current?.focus()\n          }\n        }\n\n        if(ensEntry) {\n          const resolver = await web3.eth.ens.getResolver(ensEntry)\n          updateTract({ resolver })\n        }\n      },\n      if: () => (\n        !!addrs.reverse\n        && !(addrs.address === undefined)\n        && (\n          !tracts.resolver\n          || !tracts.registrar\n          || !tracts.reverseResolver\n        )\n      ),\n    },\n    {\n      name: name ? (\n        `Set ${name} As Reverse`\n      ) : (\n        'Enter A Name To Use As Reverse'\n      ),\n      func: async () => {\n        if(!name || addrs.name === name) {\n          if(name) {\n            alert(`Reverse Already Set To: ${name}`)\n          }\n          return input.current?.focus()\n        }\n        if(\n          !addrs.name\n          || window.confirm(`Overwrite ${addrs.name}?`)\n        ) {\n          if(!tracts.registrar) {\n            throw new Error('Reverse Registrar Contract Not Set')\n          }\n          await (\n            tracts.registrar.methods\n            .setName(name)\n            .send({ from: addrs.self })\n          )\n          updateTract({ resolver: undefined })\n          updateAddr({ name: undefined, owner: undefined })\n        }\n      },\n      if: () => (\n        !!tracts.registrar\n        && addrs.address !== undefined\n        && addrs.owner !== undefined\n      )\n    }\n  ]\n\n  return (\n    <Container maxW=\"100%\">\n      <Stack>\n        <Flex justify=\"center\" justifyItems=\"center\">\n          <Text m={0} mr={2} alignSelf=\"center\">\n            ENS Name For Reverse Record:\n          </Text>\n          <Input\n            w=\"auto\" textAlign=\"center\"\n            placeholder=\"Exe: sample.ens.eth\"\n            value={name ?? ''} ref={input}\n            onChange={(evt) => {\n              setName(evt.target.value)\n              updateAddr({ address: undefined })\n              updateTract({ resolver: undefined })\n            }}\n          />\n        </Flex>\n        <Grid templateColumns=\"auto 1fr\" alignItems=\"center\">\n          {Object.entries(titles).map(([key, title], i) => {\n            const { onCopy } = useClipboard(addrs[key] ?? '')\n            if(!title) return null\n            return (\n              <Box\n                key={i} display=\"contents\"\n                sx={{ '&:hover > *': { bg: '#FBFF0522' } }}\n              >\n                <Text m={0} textAlign=\"right\" pr={5} minW=\"12em\">\n                  {title}:\n                </Text>\n                <Text m={0} textOverflow=\"clip\" whiteSpace=\"nowrap\" title={addrs[key]}>\n                  {addrs[key] && (\n                    <Button\n                      title=\"Copy\" mr={2} size=\"xs\"\n                      onClick={() => {\n                        onCopy()\n                        toast({\n                          title: 'Value Copied',\n                          duration: 1500,\n                        })\n                      }}\n                    >\n                      <CopyIcon/>\n                    </Button>\n                  )}\n                  <code>\n                    {addrs[key] === null ? (\n                      <em>Unset</em>\n                    ) : (\n                      addrs[key]\n                    )}\n                  </code>\n                </Text>\n              </Box>\n            )\n          })}\n        </Grid>\n      </Stack>\n      <Stack>\n        {handlers.map((h, i) => (\n          <Button\n            key={i}\n            onClick={async () => {\n              try {\n                await h.func()\n              } catch(err) {\n                console.error(err)\n                alert(err.message)\n              }\n            }}\n            disabled={h.if ? !h.if() : false}\n            m={0} mt=\"0 ! important\"\n          >\n            {h.name}\n          </Button>\n        ))}\n      </Stack>\n    </Container>\n  )\n}","import {\n  HashRouter as Router, Switch, Route,\n} from 'react-router-dom'\nimport ENSReverse from './ENSReverse'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (\n  <Router>\n    <Switch>\n      <Route path='/:name?' component={ENSReverse}/>\n    </Switch>\n  </Router>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}