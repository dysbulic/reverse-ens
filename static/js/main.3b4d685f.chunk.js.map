{"version":3,"sources":["ENSReverse.tsx","App.tsx","index.tsx"],"names":["ethereum","window","web3","Web3","logger","css","args","splice","console","log","apply","onboarding","MetamaskOnboarding","params","useParams","useState","name","setName","self","net","registrar","reverse","address","resolver","owner","titles","setTitles","addrs","setAddrs","tracts","setTracts","toast","useToast","updateAddr","obj","as","updateTract","ts","reset","useEffect","on","off","resetAndSet","accts","undefined","handlers","func","startOnboarding","if","isMetaMaskInstalled","a","request","method","addresses","addr","eth","getChainId","chainId","Error","substr","ens","getOwner","Contract","registrarABI","options","getResolver","test","getAddress","reverseResolver","methods","node","call","localeCompare","sensitivity","alert","claim","send","from","confirm","reversedName","maxW","justify","justifyItems","m","mr","alignSelf","w","textAlign","value","onChange","evt","target","templateColumns","alignItems","Object","entries","map","i","key","title","onCopy","useClipboard","display","sx","bg","pr","minW","textOverflow","whiteSpace","size","onClick","duration","Copy","h","error","message","disabled","mt","path","component","ENSReverse","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.3b4d685f.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport Web3 from 'web3'\nimport MetamaskOnboarding from '@metamask/onboarding'\nimport {\n  Stack, Input, Container, Flex, Button, Text, Box, Grid, useClipboard, useToast,\n} from '@chakra-ui/react'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { abi as registrarABI } from '@ensdomains/ens-contracts/artifacts/contracts/registry/ReverseRegistrar.sol/ReverseRegistrar.json'\nimport { useParams } from 'react-router-dom'\nimport { CopyIcon } from '@chakra-ui/icons'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n  }\n}\nconst { ethereum } = window\nconst web3 = new Web3(ethereum)\n\nconst logger = (css: string) => (\n  (...args: unknown[]) => {\n    args[0] = `%c ${args[0]} `\n    args.splice(1, 0, css)\n    console.log.apply(this, args)\n  }\n)\n\ninterface Addresses extends Partial<Record<string, string>> {\n  self?: string\n  address?: string\n  owner?: string\n  reverse?: string\n  net?: string\n  resolver?: string\n  registrar?: string\n  name?: string\n}\n\ninterface Contracts {\n  resolver?: Contract\n  registrar?: Contract\n  reverseResolver?: Contract\n}\n\ninterface Parameters {\n  name?: string\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const onboarding = new MetamaskOnboarding()\n  const params = useParams<Parameters>()\n  const [name, setName] = useState(\n    params.name || 'subdomain.ensname.eth'\n  )\n  const [titles, setTitles] = useState({\n    self: 'Your Address',\n    net: 'Current Network',\n    registrar: 'Reverse Registrar Address',\n    reverse: 'Reverse Address',\n    address: null as string | null,\n    resolver: 'Resolver Address',\n    owner: 'Reverse Lookup Owner',\n    name: 'Reverse Lookup',\n  })\n  const [addrs, setAddrs] = useState<Addresses>({})\n  const [tracts, setTracts] = useState<Contracts>({})\n  const toast = useToast()\n\n  const updateAddr = (obj: object) => {\n    setAddrs(as => ({ ...as, ...obj }))\n  }\n  const updateTract = (obj: object) => {\n    setTracts(ts => ({ ...ts, ...obj }))\n  }\n\n  const reset = () => {\n    setAddrs({})\n    setTracts({})\n  }\n  useEffect(() => {\n    ethereum?.on('chainChanged', reset)\n    return () => ethereum?.off('chainChanged', reset)\n  }, [])\n  useEffect(() => {\n    const resetAndSet = (accts: string[]) => {\n      reset()\n      updateAddr({ self: accts[0] })\n    }\n    ethereum?.on('accountsChanged', resetAndSet)\n    return () => ethereum?.off(\n      'accountsChanged', resetAndSet\n    )\n  }, [])\n\n  useEffect(() => {\n    setTitles((ts) => (\n      { ...ts, address: `${name}'s Address` }\n    ))\n    setAddrs((as) => (\n      { ...as, address: undefined }\n    ))\n  }, [name])\n\n  const handlers = [\n    {\n      name: 'Install MetaMask',\n      func: () => onboarding.startOnboarding(),\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Connect Ethereum Wallet',\n      func: async () => {\n        const log = logger('color: purple')\n        log('Enabling Inpage Provider')\n        const addresses = await (\n          ethereum?.request({ method: 'eth_requestAccounts' })\n        )\n        const addr = addresses?.[0]\n        log('Wallet Address', addr)\n        updateAddr({ self: addr })\n      },\n      if: () => (!!ethereum && !addrs.self),\n    },\n    {\n      name: 'Load Addresses',\n      func: async () => {\n        const log = logger('color: orange; background-color: purple')\n\n        const net = await (async () => {\n          const chainId = await web3.eth.getChainId()\n          switch(chainId) {\n            case 1: return 'mainnet'\n            case 2: return 'Morden'\n            case 3: return 'Ropsten'\n            case 4: return 'Rinkeby'\n            case 42: return 'Kovan'\n            case 100: return 'xDAI'\n            default: return `unknown (id:${chainId})`\n          }\n        })()\n        log('Setting addrs.net', net)\n        updateAddr({ net })\n\n        if(!addrs.self) throw new Error('Wallet Address Not Set')\n        const reverse = (\n          `${addrs.self.substr(2)}.addr.reverse`\n        )\n        log('Adding Reverse Address', reverse)\n        updateAddr({ reverse })\n\n        log('Looking Up addr.reverse Owner')\n        const registrar = (\n          await web3.eth.ens.getOwner('addr.reverse')\n        )\n        log('Reverse Registrar', registrar)\n        if(!registrar) {\n          throw new Error(\"Couldn't resolve reverse registrar.\")\n        }\n        updateAddr({ registrar })\n      },\n      if: () => (\n        !!addrs.self\n        && (\n          !addrs.net\n          || !addrs.reverse\n          || !addrs.registrar\n        )\n      ),\n    },\n    {\n      name: 'Load Contracts',\n      func: async () => {\n        const log = logger('color: lightgray; background-color: black')\n\n        if(!addrs.registrar) {\n          throw new Error('Reverse Registrar Address Not Set')\n        }\n        const registrar = new web3.eth.Contract(\n          registrarABI as AbiItem[], addrs.registrar\n        )\n        log('Reverse Registrar', registrar.options.address)\n        updateTract({ registrar })\n\n        const resolver = await web3.eth.ens.getResolver(name)\n        updateTract({ resolver })\n\n        log('Resolver Address', resolver.options.address)\n\n        if(/^0x0+$/.test(resolver.options.address)) {\n          updateAddr({ address: null, owner: null })\n        } else {\n          const address = await web3.eth.ens.getAddress(name)\n          updateAddr({\n            address,\n            owner: await web3.eth.ens.getOwner(address),\n          })\n        }\n\n        if(!addrs.reverse) {\n          throw new Error('Reverse Address Is Not Set')\n        }\n        const reverseResolver = await (\n          web3.eth.ens.getResolver(addrs.reverse)\n        )\n        updateTract({ reverseResolver })\n\n        const address = reverseResolver.options.address\n        updateAddr({ resolver: address })\n\n        if(/^0x0+$/.test(address)) {\n          updateAddr({ name: null })\n        } else {\n          const node = await (\n            registrar.methods.node(addrs.self).call()\n          )\n          const name = (\n            await reverseResolver.methods.name(node).call()\n          )\n          updateAddr({ name: name ?? null })\n        }\n      },\n      if: () => (\n        !!addrs.reverse\n        && (\n          !tracts.registrar\n          || !tracts.reverseResolver\n        )\n      ),\n    },\n    {\n      name: 'Claim the Reverse Address',\n      func: async () => {\n        if(\n          addrs.owner?.localeCompare(\n            addrs.self ?? '', 'en', { sensitivity: 'base' }\n          ) === 0\n        ) {\n          return alert(\n            `This account has already claimed its reverse address. (${\n              addrs.self\n            })`\n          )\n        }\n        if(!tracts.registrar) {\n          throw new Error('Reverse Registrar Contract Not Set')\n        }\n        await (\n          tracts.registrar\n          .methods.claim(addrs.self)\n          .send({ from: addrs.self })\n          .on('confirmation', () => {\n            updateAddr({ owner: null })\n            updateTract({ resolver: null })\n          })\n        )\n      },\n      if: () => (\n        /^0x0+$/.test(addrs.resolver ?? '')\n        && !!tracts.registrar\n      )\n    },\n    {\n      name: `Set ${name} As Reverse`,\n      func: async () => {\n        if(addrs.name === name) {\n          return alert(`Reverse Already Set To: ${name}`)\n        }\n        if(\n          !addrs.name\n          || window.confirm(`Overwrite ${addrs.name}?`)\n        ) {\n          if(!tracts.registrar) {\n            throw new Error('Reverse Registrar Not Set')\n          }\n          await (\n            tracts.registrar.methods\n            .setName(name)\n            .send({ from: addrs.self })\n          )\n\n          if(!tracts.resolver) {\n            throw new Error('Reverse Resolver Not Set')\n          }\n          const node = await (\n            tracts.registrar.methods\n            .node(addrs.self)\n            .call()\n          )\n          const reversedName = await (\n            tracts.resolver.methods.name(node).call()\n          )\n          updateAddr({ name: reversedName })\n        }\n      },\n      if: () => (\n        !/^0x0+$/.test(addrs.resolver ?? '')\n        && !!tracts.resolver\n        && !!tracts.registrar\n      )\n    }\n  ]\n\n  return (\n    <Container maxW=\"100%\">\n      <Stack>\n        <Flex justify=\"center\" justifyItems=\"center\">\n          <Text m={0} mr={2} alignSelf=\"center\">\n            ENS Name For Reverse Record:\n          </Text>\n          <Input\n            w=\"auto\"\n            textAlign=\"center\"\n            value={name}\n            onChange={evt => setName(evt.target.value)}\n          />\n        </Flex>\n        <Grid templateColumns=\"auto 1fr\" alignItems=\"center\">\n          {Object.entries(titles).map(([key, title], i) => {\n            const { onCopy } = useClipboard(addrs[key] ?? '')\n            return (\n              <Box\n                key={i} display=\"contents\"\n                sx={{ '&:hover > *': { bg: '#FBFF0522' } }}\n              >\n                <Text m={0} textAlign=\"right\" pr={5} minW=\"12em\">\n                  {title}:\n                </Text>\n                <Text m={0} textOverflow=\"clip\" whiteSpace=\"nowrap\" title={addrs[key]}>\n                  {addrs[key] && (\n                    <Button\n                      title=\"Copy\" mr={2} size=\"xs\"\n                      onClick={() => {\n                        onCopy()\n                        toast({\n                          title: 'Value Copied',\n                          duration: 1500,\n                        })\n                      }}\n                    >\n                      <CopyIcon/>\n                    </Button>\n                  )}\n                  <code>\n                    {addrs[key] === null ? (\n                      <em>Unset</em>\n                    ) : (\n                      addrs[key]\n                    )}\n                  </code>\n                </Text>\n              </Box>\n            )\n          })}\n        </Grid>\n      </Stack>\n      <Stack>\n        {handlers.map((h, i) => (\n          <Button\n            key={i}\n            onClick={async () => {\n              try {\n                await h.func()\n              } catch(err) {\n                console.error(err)\n                alert(err.message)\n              }\n            }}\n            disabled={h.if ? !h.if() : false}\n            m={0} mt=\"0 ! important\"\n          >\n            {h.name}\n          </Button>\n        ))}\n      </Stack>\n    </Container>\n  )\n}","import {\n  HashRouter as Router, Switch, Route,\n} from 'react-router-dom'\nimport { Container } from '@chakra-ui/react'\nimport ENSReverse from './ENSReverse'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (\n  <Router>\n    <Switch>\n      <Route path='/:name?' component={ENSReverse}/>\n    </Switch>\n  </Router>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}