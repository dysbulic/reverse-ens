{"version":3,"sources":["ENSReverse.tsx","App.tsx","index.tsx"],"names":["providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","process","web3Modal","Web3Modal","cacheProvider","logger","css","args","splice","console","log","apply","tooltips","self","net","registrar","reverse","address","resolver","owner","name","params","useParams","useState","setName","web3","setWeb3","titles","setTitles","addrs","setAddrs","tracts","setTracts","loading","setLoading","once","setOnce","toast","useToast","placement","useBreakpointValue","input","useRef","updateAddr","obj","as","updateTract","ts","reset","resolve","useCallback","a","Error","eth","ens","getAddress","useEffect","undefined","setProvider","provider","Web3","on","resetAccount","accts","cachedProvider","connect","then","getAccounts","addresses","getChainId","chainId","getOwner","test","registrarContract","Contract","registrarABI","substr","getResolver","reverseResolver","ensEntry","methods","node","call","resolved","title","description","duration","current","focus","alert","message","handlers","if","some","tract","submission","evt","window","confirm","send","from","maxW","action","onSubmit","justify","justifyItems","m","mr","alignSelf","w","textAlign","placeholder","autoFocus","value","ref","onChange","target","templateColumns","alignItems","mt","Object","entries","map","i","key","onCopy","useClipboard","display","sx","bg","hasArrow","label","pr","minW","userSelect","textOverflow","whiteSpace","overflowX","ml","size","onClick","Copy","h","disabled","length","type","path","component","ENSReverse","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.9bba27d0.chunk.js","sourcesContent":["import {\n  useState, useEffect, useRef, useCallback, FormEvent,\n} from 'react'\nimport Web3 from 'web3'\nimport {\n  Stack, Input, Container, Flex, Button, Text, Box,\n  Grid, useClipboard, useToast, Spinner, Tooltip,\n  useBreakpointValue, Placement,\n} from '@chakra-ui/react'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { abi as registrarABI } from '@ensdomains/ens-contracts/artifacts/contracts/registry/ReverseRegistrar.sol/ReverseRegistrar.json'\nimport { useParams } from 'react-router-dom'\nimport { CopyIcon } from '@chakra-ui/icons'\nimport Web3Modal from 'web3modal'\nimport WalletConnectProvider from '@walletconnect/web3-provider'\nimport { ReactElement } from 'react'\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: process.env.REACT_APP_INFURA_ID,\n    },\n  },\n}\n\nconst web3Modal = new Web3Modal({\n  cacheProvider: true,\n  providerOptions,\n})\n\nconst logger = (css: string) => (\n  (...args: unknown[]) => {\n    args[0] = `%c ${args[0]} `\n    args.splice(1, 0, css)\n    console.log.apply(this, args)\n  }\n)\n\ninterface Addresses extends Partial<Record<string, string>> {\n  self?: string\n  address?: string\n  owner?: string\n  reverse?: string\n  net?: string\n  resolver?: string\n  registrar?: string\n  name?: string\n}\n\ninterface Contracts {\n  resolver?: Contract\n  registrar?: Contract\n  reverseResolver?: Contract\n}\n\ninterface Parameters {\n  name?: string\n}\n\nconst tooltips: Record<string, string> = {\n  self: 'This is the address of your wallet. The reverse record is an ENS name that is returned when users search on this address. There is only one reverse record per address.',\n  net: 'The currently selected ethereum chain. In general ENS resolution is done on the mainnet, but instances exist on some of the test chains as well.',\n  registrar: 'This is the contract that controls name registration for the reverse records.',\n  reverse: 'This is a specially formatted address that is used to look up your reverse record.',\n  address: \"The forward resolution for the currently selected name to use for the reverse record. There is no technical requirement that this resolve to your wallet address, but if it doesn't, many implementations will disregard the record.\", \n  resolver: 'This is the contract address for the resolver for the resolution of reverse entries.',\n  owner: 'When you create a reverse entry, you are set as the owner of the reverse address.',\n  name: 'This is the currently configured reverse record for your wallet address.',\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const params = useParams<Parameters>()\n  const [name, setName] = useState(params.name)\n  const [web3, setWeb3] = useState<Web3>()\n  const [titles, setTitles] = useState({\n    self: 'Your Address',\n    net: 'Current Network',\n    registrar: 'Reverse Registrar Address',\n    reverse: 'Reverse Address',\n    resolver: 'Resolver Address',\n    address: null as string | null,\n    owner: 'Reverse Lookup Owner',\n    name: 'Current Reverse',\n  })\n  const [addrs, setAddrs] = useState<Addresses>({})\n  const [tracts, setTracts] = useState<Contracts>({})\n  const [loading, setLoading] = useState(false)\n  const [once, setOnce] = useState(false)\n  const toast = useToast()\n  const placement = (\n    useBreakpointValue<Placement>(['bottom', 'right'])\n  )\n  const input = useRef<HTMLInputElement | null>(null)\n\n  const updateAddr = (obj: object) => {\n    setAddrs(as => ({ ...as, ...obj }))\n  }\n  const updateTract = (obj: object) => {\n    setTracts(ts => ({ ...ts, ...obj }))\n  }\n\n  const reset = () => {\n    setAddrs({})\n    setTracts({})\n    setOnce(false)\n  }\n\n  const resolve = useCallback(async (name) => {\n    if(!web3) return null\n\n    try {\n      if(!name) throw new Error('Name Not Set')\n      const address = await web3.eth.ens.getAddress(name)\n      updateAddr({ address })\n    } catch(err) {\n      updateAddr({ address: null })\n    }\n  }, [web3])\n\n  useEffect(() => {\n    setTitles((ts) => (\n      { ...ts, address: name ? `${name}'s Address` : null }\n    ))\n    setAddrs((as) => (\n      { ...as, address: undefined }\n    ))\n\n    resolve(name)\n  }, [name, resolve])\n\n  const setProvider = useCallback(\n    async (provider: any) => {\n      const log = logger('color: purple')\n      const web3 = new Web3(provider)\n      setWeb3(web3)\n\n      if(provider.on) {\n        log('Listening to Provider')\n        provider.on('disconnect', reset)\n        provider.on('chainChanged', reset)\n\n        const resetAccount = (accts: string[]) => {\n          reset()\n          updateAddr({ self: accts[0] })\n        }\n        provider.on('accountsChanged', resetAccount)\n      }\n    },\n    [],\n  )\n\n  useEffect(() => {\n    if(web3Modal.cachedProvider) {\n      web3Modal.connect().then(setProvider)\n    }\n  }, [setProvider])\n\n  useEffect(() => {\n    (async () => {\n      if(!web3 || once) return null\n\n      setOnce(true)\n\n      const log = logger('color: orange; background-color: purple')\n      const addresses = await web3.eth.getAccounts()\n      const self = addresses[0]\n      log('Wallet Address', self)\n      updateAddr({ self })\n\n      const net = await (async () => {\n        const chainId = await web3.eth.getChainId()\n        switch(chainId) {\n          case 1: return 'mainnet'\n          case 2: return 'Morden'\n          case 3: return 'Ropsten'\n          case 4: return 'Rinkeby'\n          case 42: return 'Kovan'\n          case 100: return 'xDAI'\n          default: return `unknown (id:${chainId})`\n        }\n      })()\n      log('Setting Network Name', net)\n      updateAddr({ net })\n\n      resolve(name)\n\n      let registrar: ReactElement | string = (\n        await web3.eth.ens.getOwner('addr.reverse')\n      )\n      log('Reverse Registrar', registrar)\n      let registrarContract\n      if(!registrar || /^0x0+$/.test(registrar)) {\n        registrar = <em>Error: Couldn't get reverse registrar.</em>\n      } else {\n        registrarContract = new web3.eth.Contract(\n          registrarABI as AbiItem[], registrar\n        )\n        log('Reverse Registrar', registrarContract.options.address)\n        updateTract({ registrar: registrarContract })\n      }\n      updateAddr({ registrar })\n\n      const reverse: string = (\n        `${self.substr(2)}.addr.reverse`\n      )\n      log('Adding Reverse Address', reverse)\n      updateAddr({ reverse })\n\n      let reverseResolver, address\n      if(reverse) {\n        updateAddr({\n          owner: await web3.eth.ens.getOwner(reverse),\n        })\n\n        reverseResolver = await (\n          web3.eth.ens.getResolver(reverse)\n        )\n        updateTract({ reverseResolver })\n\n        address = reverseResolver.options.address\n        updateAddr({ resolver: address })\n      }\n\n      let ensEntry = name\n\n      if(!address || /^0x0+$/.test(address)) {\n        updateAddr({ name: null })\n      } else if(registrarContract && reverseResolver) {\n        const node = await (\n          registrarContract.methods.node(self).call()\n        )\n        const resolved = (\n          (await reverseResolver.methods.name(node).call())\n          ?? null\n        )\n        updateAddr({ name: resolved })\n        if(!name) {\n          ensEntry = resolved\n          setName(resolved)\n          toast({\n            title: 'Set Name',\n            description: (\n              `Defaulting name to current reverse record: \"${resolved}\".`\n            ),\n            duration: 3000,\n          })\n          input.current?.focus()\n        }\n      }\n\n      if(ensEntry) {\n        try {\n          const resolver = await web3.eth.ens.getResolver(ensEntry)\n          updateTract({ resolver })\n        } catch(err) {\n          alert(err.message)\n        }\n      }\n    })()\n  }, [web3, once, name, toast])\n\n  const handlers = [\n    {\n      name: 'Connect Ethereum Wallet',\n      if: () => (!addrs.self),\n    },\n    {\n      name: name ? (\n        `Set ${name} As Reverse`\n      ) : (\n        'Enter A Name To Use As Reverse'\n      ),\n      if: () => (\n        !name\n        || ![\n          name, addrs.name, tracts.registrar,\n        ].some(tract => tract === undefined)\n      )\n    }\n  ]\n\n  const submission = async (evt: FormEvent) => {\n    try {\n      if(!web3) {\n        return setProvider(await web3Modal.connect())\n      }\n      if(!name || addrs.name === name) {\n        if(name) {\n          alert(`Reverse Already Set To: ${name}`)\n        }\n        return input.current?.focus()\n      }\n      if(\n        !addrs.name\n        || window.confirm(`Overwrite ${addrs.name}?`)\n      ) {\n        if(!tracts.registrar) {\n          throw new Error('Reverse Registrar Contract Not Set')\n        }\n        setLoading(true)\n        await (\n          tracts.registrar.methods\n          .setName(name)\n          .send({ from: addrs.self })\n        )\n        setOnce(false) // trigger reevaluation\n      }\n    } catch(err) {\n      alert(err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Container\n      maxW=\"100%\" as=\"form\"\n      action=\"#\" onSubmit={submission}\n    >\n      <Stack>\n        <Flex justify=\"center\" justifyItems=\"center\">\n          <Text m={0} mr={2} alignSelf=\"center\">\n            ENS Name For Reverse Record:\n          </Text>\n          <Input\n            w=\"auto\" textAlign=\"center\"\n            placeholder=\"Exe: sample.ens.eth\"\n            autoFocus value={name ?? ''} ref={input}\n            onChange={(evt) => {\n              setName(evt.target.value)\n            }}\n          />\n        </Flex>\n        <Grid\n          templateColumns={['auto', 'auto 1fr']}\n          alignItems=\"center\" maxW=\"100vw\" mt={3}\n        >\n          {Object.entries(titles).map(([key, title], i) => {\n            const { onCopy } = useClipboard(addrs[key] ?? '')\n            if(!title) return null\n            return (\n              <Box\n                key={i} display=\"contents\"\n                sx={{ '&:hover > *': { bg: '#FBFF0522' } }}\n              >\n                <Tooltip\n                  hasArrow placement={placement}\n                  label={tooltips[key]}\n                >\n                  <Text\n                    textAlign={['left', 'right']}\n                    m={0} pr={5} minW=\"12em\"\n                    userSelect=\"none\"\n                  >\n                    {title}:\n                  </Text>\n                </Tooltip>\n                <Text\n                  m={0} textOverflow=\"clip\" whiteSpace=\"nowrap\"\n                  title={addrs[key]} overflowX=\"hidden\" ml={[5, 0]}\n                >\n                  {addrs[key] && (\n                    <Button\n                      title=\"Copy\" mr={2} size=\"xs\"\n                      onClick={() => {\n                        onCopy()\n                        toast({\n                          title: 'Value Copied',\n                          duration: 1500,\n                        })\n                      }}\n                    >\n                      <CopyIcon/>\n                    </Button>\n                  )}\n                  <code>\n                    {addrs[key] === null ? (\n                      <em>Unset</em>\n                    ) : (\n                      addrs[key]\n                    )}\n                  </code>\n                </Text>\n              </Box>\n            )\n          })}\n        </Grid>\n      </Stack>\n      <Stack mt={3}>\n        {handlers.map((h, i) => (\n          <Button\n            key={i}\n            disabled={loading || (h.if ? !h.if() : false)}\n            m={0} mt=\"0 ! important\"\n            onClick={submission}\n          >\n            {loading && (i + 1 === handlers.length) && (\n              <Spinner size=\"sm\" mr={3}/>\n            )}\n            {h.name}\n          </Button>\n        ))}\n        <Input type=\"submit\" display=\"none\"/>\n      </Stack>\n    </Container>\n  )\n}","import {\n  HashRouter as Router, Switch, Route,\n} from 'react-router-dom'\nimport ENSReverse from './ENSReverse'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (\n  <Router>\n    <Switch>\n      <Route path='/:name?' component={ENSReverse}/>\n    </Switch>\n  </Router>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}