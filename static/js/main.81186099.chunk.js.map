{"version":3,"sources":["ENSReverse.tsx","App.tsx","index.tsx"],"names":["ethereum","window","web3","Web3","logger","css","args","splice","console","log","apply","onboarding","MetamaskOnboarding","params","useParams","useState","name","setName","self","net","revRegistrar","rev","owner","address","revOwner","resolver","revName","titles","setTitles","addrs","setAddrs","tracts","setTracts","updateAddr","obj","as","updateTract","ts","reset","on","accts","useEffect","undefined","handlers","func","startOnboarding","if","isMetaMaskInstalled","stopOnboarding","err","warn","a","request","method","addresses","addr","eth","getChainId","chainId","Error","revAddr","substr","ens","getOwner","getResolver","test","options","getAddress","Contract","revRegistrarABI","methods","defaultResolver","call","revResolver","node","alert","claim","send","from","confirm","justify","m","mr","textAlign","value","onChange","evt","target","templateColumns","alignItems","Object","entries","map","i","key","title","display","sx","bg","pr","minW","textOverflow","h","onClick","error","message","disabled","py","mt","className","basename","process","path","component","ENSReverse","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.81186099.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport Web3 from 'web3'\nimport MetamaskOnboarding from '@metamask/onboarding'\nimport {\n  Stack, Input, Container, Flex, Button, Text, Box, Grid,\n} from '@chakra-ui/react'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { abi as revRegistrarABI } from '@ensdomains/ens-contracts/artifacts/contracts/registry/ReverseRegistrar.sol/ReverseRegistrar.json'\nimport { useParams } from 'react-router-dom'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n  }\n}\nconst { ethereum } = window\nconst web3 = new Web3(ethereum)\n\nconst logger = (css: string) => (\n  (...args: unknown[]) => {\n    args[0] = `%c ${args[0]} `\n    args.splice(1, 0, css)\n    console.log.apply(this, args)\n  }\n)\n\ninterface Addresses extends Partial<Record<string, string>> {\n  self?: string\n  address?: string\n  owner?: string\n  rev?: string\n  net?: string\n  resolver?: string\n  revRegistrar?: string\n  ens?: string\n  defaultResolver?: string\n  revOwner?: string\n  revName?: string\n}\n\ninterface Contracts {\n  revResolver?: Contract\n  revRegistrar?: Contract\n}\n\ninterface Parameters {\n  name?: string\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const onboarding = new MetamaskOnboarding()\n  const params = useParams<Parameters>()\n  const [name, setName] = useState(\n    params.name || 'subdomain.ensname.eth'\n  )\n  const [titles, setTitles] = useState({\n    self: 'Your Address',\n    net: 'Current Network',\n    revRegistrar: 'Reverse Registrar Address',\n    rev: 'Reverse Address',\n    owner: null as string | null,\n    address: null as string | null,\n    revOwner: `Reverse Lookup Owner`,\n    resolver: 'Resolver Address',\n    revName: 'Reverse Lookup',\n  })\n  const [addrs, setAddrs] = useState<Addresses>({})\n  const [tracts, setTracts] = useState<Contracts>({})\n\n  const updateAddr = (obj: object) => {\n    setAddrs(as => ({ ...as, ...obj }))\n  }\n  const updateTract = (obj: object) => {\n    setTracts(ts => ({ ...ts, ...obj }))\n  }\n\n  const reset = () => {\n    setAddrs({})\n    setTracts({})\n  }\n  ethereum?.on('chainChanged', reset)\n  ethereum?.on('accountsChanged',\n    (accts: string[]) => {\n      reset()\n      updateAddr({ self: accts[0] })\n    }\n  )\n\n  useEffect(() => {\n    setTitles((ts) => (\n      {\n        ...ts,\n        owner: `${name} Owner`,\n        address: `${name} Address`,\n      }\n    ))\n    setAddrs((as) => (\n      { ...as, owner: undefined, address: undefined }\n    ))\n  }, [name])\n\n  const handlers = [\n    {\n      name: 'Install MetaMask',\n      func: () => onboarding.startOnboarding(),\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Stop Onboarding',\n      func: () => { try {\n        onboarding.stopOnboarding()\n      } catch(err) {\n        console.warn(err)\n      } },\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Connect To Ethereum Wallet',\n      func: async () => {\n        const log = logger('color: purple')\n        log('Enabling Inpage Provider')\n        const addresses = await (\n          ethereum?.request({ method: 'eth_requestAccounts' })\n        )\n        const addr = addresses?.[0]\n        log('Wallet Address', addr)\n        updateAddr({ self: addr })\n      },\n      if: () => (!!ethereum && !addrs.self),\n    },\n    {\n      name: 'Load Addresses',\n      func: async () => {\n        const log = logger('color: orange; background-color: purple')\n\n        const net = await (async () => {\n          const chainId = await web3.eth.getChainId()\n          switch(chainId) {\n            case 1: return 'mainnet'\n            case 2: return 'Morden'\n            case 3: return 'Ropsten'\n            case 4: return 'Rinkeby'\n            case 42: return 'Kovan'\n            case 100: return 'xDAI'\n            default: return `unknown (id:${chainId})`\n          }\n        })()\n        log('Setting addrs.net', net)\n        updateAddr({ net })\n\n        if(!addrs.self) throw new Error('Wallet Address Not Set')\n        const revAddr = (\n          `${addrs.self.substr(2)}.addr.reverse`\n        )\n        log('Adding Reverse Address', revAddr)\n        updateAddr({ rev: revAddr })\n\n        log('Looking Up addr.reverse Owner')\n        const revRegistrar = (\n          await web3.eth.ens.getOwner('addr.reverse')\n        )\n        log('revReg', revRegistrar)\n        if(!revRegistrar) {\n          throw new Error(\"Couldn't resolve reverse registrar.\")\n        }\n        log('revReg', revRegistrar)\n        updateAddr({ revRegistrar })\n\n        const revOwner = await web3.eth.ens.getOwner(revAddr)\n        updateAddr({ revOwner })\n\n        const resolver = await web3.eth.ens.getResolver(name)\n        if(/^0x0+$/.test(resolver.options.address)) {\n          updateAddr({ address: null, owner: null })\n        } else {\n          const address = await web3.eth.ens.getAddress(name)\n          updateAddr({\n            address,\n            owner: await web3.eth.ens.getOwner(address),\n          })\n        }\n      },\n      if: () => (\n        !!addrs.self\n        && (\n          !addrs.net\n          || addrs.address === undefined\n          || addrs.owner === undefined\n        )\n      ),\n    },\n    {\n      name: 'Load Contracts',\n      func: async () => {\n        const log = logger('color: lightgray; background-color: black')\n\n        if(!addrs.revRegistrar) {\n          throw new Error('Reverse Registrar Address Not Set')\n        }\n        const revRegistrar = new web3.eth.Contract(\n          revRegistrarABI as AbiItem[], addrs.revRegistrar\n        )\n        log('Reverse Registrar', revRegistrar.options.address)\n        updateTract({ revRegistrar })\n\n        const defaultResolver = await (\n          revRegistrar.methods.defaultResolver().call()\n        )\n        updateAddr({ defaultResolver })\n\n        if(!addrs.rev) {\n          throw new Error('Reverse Address Is Not Set')\n        }\n        const revResolver = await (\n          web3.eth.ens.getResolver(addrs.rev)\n        )\n        updateTract({ revResolver })\n        const resolver = revResolver.options.address\n        updateAddr({ resolver })\n\n        if(/^0x0+$/.test(resolver)) {\n          updateAddr({ revName: null })\n        } else {\n          const node = await (\n            revRegistrar.methods.node(addrs.self).call()\n          )\n          const revName = (\n            await revResolver.methods.name(node).call()\n          )\n          updateAddr({ revName })\n        }\n      },\n      if: () => (!!addrs.revRegistrar && !tracts.revRegistrar),\n    },\n    {\n      name: 'Claim the Reverse Address',\n      func: async () => {\n        if(addrs.revOwner === addrs.self) {\n          return alert(\n            `This account has already claimed its reverse address. (${\n              addrs.self\n            })`\n          )\n        }\n        if(!tracts.revRegistrar) {\n          throw new Error('Reverse Registrar Contract Not Set')\n        }\n        await (\n          tracts.revRegistrar\n          .methods.claim(addrs.self)\n          .send({ from: addrs.self })\n        )\n        if(!addrs.rev) throw new Error('Missing Reverse Address')\n        const revOwner = await web3.eth.ens.getOwner(addrs.rev)\n        updateAddr({ revOwner })\n      },\n      if: () => (\n        /^0x0+$/.test(addrs.revOwner ?? '') && !!tracts.revRegistrar\n      )\n    },\n    {\n      name: 'Link Reverse Name',\n      func: async () => {\n        if(addrs.revName === name) {\n          return alert(`Reverse Already Set To: ${name}`)\n        }\n        if(\n          !addrs.revName\n          || window.confirm(`Overwrite ${addrs.revName}?`)\n        ) {\n          if(!tracts.revRegistrar) {\n            throw new Error('Reverse Registrar Not Set')\n          }\n          await (\n            tracts.revRegistrar.methods\n            .setName(name)\n            .send({ from: addrs.self })\n          )\n\n          if(!tracts.revResolver) {\n            throw new Error('Reverse Resolver Not Set')\n          }\n          const node = await (\n            tracts.revRegistrar.methods\n            .node(addrs.self)\n            .call()\n          )\n          const revName = await (\n            tracts.revResolver.methods.name(node).call()\n          )\n          updateAddr({ revName })\n        }\n      },\n      if: () => (\n        !/^0x0+$/.test(addrs.revOwner ?? '')\n        && !!tracts.revResolver\n        && !!tracts.revRegistrar\n      )\n    }\n  ]\n\n  return (\n    <Container>\n      <Stack>\n        <Flex justify=\"center\">\n          <Text m={0} mr={5}>ENS Address For Reverse Record:</Text>\n          <Input\n            textAlign=\"center\"\n            value={name}\n            onChange={evt => setName(evt.target.value)}\n          />\n        </Flex>\n        <Grid templateColumns=\"auto 1fr\" alignItems=\"center\">\n          {Object.entries(titles).map(([key, title], i) => (\n            <Box key={i} display=\"contents\" sx={{ '&:hover > *': { bg: 'yellow' } }}>\n              <Text m={0} textAlign=\"right\" pr={5} minW=\"12em\">{title}:</Text>\n              <Text m={0} textOverflow=\"clip\" title={addrs[key]}><code>\n                {addrs[key] === null ? <em>Unset</em> : addrs[key]}\n              </code></Text>\n            </Box>\n          ))}\n        </Grid>\n      </Stack>\n      <Stack>\n        {handlers.map((h, i) => (\n          <Button\n            key={i}\n            onClick={async () => {\n              try {\n                await h.func()\n              } catch(err) {\n                console.error(err)\n                alert(err.message)\n              }\n            }}\n            disabled={h.if ? !h.if() : false}\n            m={0} py={10} mt=\"0 ! important\"\n          >\n            {h.name}\n          </Button>\n        ))}\n      </Stack>\n    </Container>\n  )\n}","import {\n  BrowserRouter as Router, Switch, Route,\n} from 'react-router-dom'\nimport { Container } from '@chakra-ui/react'\nimport ENSReverse from './ENSReverse'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (\n  <Container className=\"App\">\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path='/:name?' component={ENSReverse}/>\n      </Switch>\n    </Router>\n  </Container>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}