{"version":3,"sources":["ENSReverse.tsx","App.tsx","index.tsx"],"names":["ethereum","window","web3","Web3","logger","css","args","splice","console","log","apply","onboarding","MetamaskOnboarding","useState","name","setName","self","net","revRegistrar","rev","owner","address","revOwner","resolver","revName","titles","setTitles","addrs","setAddrs","tracts","setTracts","updateAddr","obj","as","updateTract","ts","on","accts","useEffect","undefined","handlers","func","startOnboarding","if","isMetaMaskInstalled","stopOnboarding","err","warn","a","request","method","addresses","addr","parseInt","networkVersion","revAddr","substr","eth","ens","getOwner","getResolver","test","options","unset","getAddress","Contract","revRegistrarABI","methods","defaultResolver","call","Error","revResolver","node","claim","send","from","revLook","alert","justify","textAlign","value","onChange","evt","target","templateColumns","alignItems","Object","entries","map","i","key","title","display","_hover","bg","m","pr","minW","textOverflow","h","onClick","disabled","py","mt","className","ENSReverse","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.8b2649bc.chunk.js","sourcesContent":["import { useState } from 'react'\nimport Web3 from 'web3'\nimport MetamaskOnboarding from '@metamask/onboarding'\nimport {\n  Stack, Input, Container, Flex, Button, Text, Box, Grid,\n} from '@chakra-ui/react'\nimport { AbiItem } from 'web3-utils'\nimport { Contract } from 'web3-eth-contract'\nimport { abi as revRegistrarABI } from '@ensdomains/ens-contracts/artifacts/contracts/registry/ReverseRegistrar.sol/ReverseRegistrar.json'\nimport { useEffect } from 'react'\n\ndeclare global {\n  interface Window {\n    ethereum: any\n  }\n}\nconst { ethereum } = window\nconst web3 = new Web3(ethereum)\n\nconst logger = (css: string) => (\n  (...args: unknown[]) => {\n    args[0] = `%c ${args[0]} `\n    args.splice(1, 0, css)\n    console.log.apply(this, args)\n  }\n)\n\ninterface Addresses extends Partial<Record<string, string>> {\n  self?: string\n  address?: string\n  owner?: string\n  rev?: string\n  net?: string\n  resolver?: string\n  revRegistrar?: string\n  ens?: string\n  defaultResolver?: string\n  revOwner?: string\n  revName?: string\n}\n\ninterface Contracts {\n  revResolver?: Contract\n  revRegistrar?: Contract\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n  const onboarding = new MetamaskOnboarding()\n  const [name, setName] = useState('subdomain.ensname.eth')\n  const [titles, setTitles] = useState({\n    self: 'Your Address',\n    net: 'Current Network',\n    revRegistrar: 'Reverse Registrar Address',\n    rev: 'Reverse Address',\n    owner: null as string | null,\n    address: null as string | null,\n    revOwner: `Reverse Lookup Owner`,\n    resolver: 'Resolver Address',\n    revName: 'Reverse Lookup',\n  })\n  const [addrs, setAddrs] = useState<Addresses>({})\n  const [tracts, setTracts] = useState<Contracts>({})\n\n  const updateAddr = (obj: object) => {\n    setAddrs(as => ({ ...as, ...obj }))\n  }\n  const updateTract = (obj: object) => {\n    setTracts(ts => ({ ...ts, ...obj }))\n  }\n\n  const reset = () => {\n    setAddrs({})\n    setTracts({})\n  }\n  ethereum.on('networkChanged', reset)\n  ethereum.on('accountsChanged', (accts: string[]) => (\n    updateAddr({ self: accts[0] })\n  ))\n\n  useEffect(() => {\n    setTitles((ts) => (\n      {\n        ...ts,\n        owner: `${name} Owner`,\n        address: `${name} Address`,\n      }\n    ))\n    setAddrs((as) => (\n      { ...as, owner: undefined, address: undefined }\n    ))\n  }, [name])\n\n  const handlers = [\n    {\n      name: 'Install MetaMask',\n      func: () => onboarding.startOnboarding(),\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Stop Onboarding',\n      func: () => { try {\n        onboarding.stopOnboarding()\n      } catch(err) {\n        console.warn(err)\n      } },\n      if: () => !MetamaskOnboarding.isMetaMaskInstalled(),\n    },\n    {\n      name: 'Enable Ethereum on this Site',\n      func: async () => {\n        const log = logger('color: purple')\n        log('Enabling Inpage Provider')\n        const addresses = await (\n          window.ethereum.request({ method: 'eth_requestAccounts' })\n        )\n        const addr = addresses[0]\n        log('Wallet Address', addr)\n        updateAddr({ self: addr })\n      },\n      if: () => (!addrs.self),\n    },\n    {\n      name: 'Load Addresses',\n      func: async () => {\n        const log = logger('color: orange; background-color: purple')\n\n        const net = (() => {\n          switch(parseInt(ethereum.networkVersion)) {\n            case 1: return 'mainnet'\n            case 2: return 'Morden'\n            case 3: return 'Ropsten'\n            case 4: return 'Rinkeby'\n            case 42: return 'Kovan'\n            case 100: return 'xDAI'\n            default: return `unknown (id:${ethereum.networkVersion})`\n          }\n        })()\n        log('Setting addrs.net', net)\n        updateAddr({ net })\n\n        const revAddr = (\n          `${(addrs.self ?? '').substr(2)}.addr.reverse`\n        )\n        log('Adding Reverse Address', revAddr)\n        updateAddr({ rev: revAddr })\n\n        const revRegistrar = (\n          await web3.eth.ens.getOwner('addr.reverse')\n        )\n        updateAddr({ revRegistrar })\n\n        const revOwner = await web3.eth.ens.getOwner(revAddr)\n        updateAddr({ revOwner })\n\n        const resolver = await web3.eth.ens.getResolver(name)\n        if(/^0x0+$/.test(resolver.options.address)) {\n          const unset = <em>Unset</em>\n          updateAddr({ address: unset })\n          updateAddr({ owner: unset })\n        } else {\n          const address = await web3.eth.ens.getAddress(name)\n          updateAddr({ address })\n          updateAddr({\n            owner: await web3.eth.ens.getOwner(address)\n          })\n        }\n      },\n      if: () => (!!addrs.self && (\n        !addrs.net || !addrs.address || !addrs.owner\n      )),\n    },\n    {\n      name: 'Load Contracts',\n      func: async () => {\n        const log = logger('color: lightgray; background-color: black')\n\n        const revRegistrar = new web3.eth.Contract(\n          revRegistrarABI as AbiItem[], addrs.revRegistrar\n        )\n        log('Reverse Registrar', revRegistrar.options.address)\n        updateTract({ revRegistrar })\n\n        const defaultResolver = await (\n          revRegistrar.methods.defaultResolver().call()\n        )\n        updateAddr({ defaultResolver })\n\n        if(!addrs.rev) throw new Error('Reverse Address Is Not Set')\n        const revResolver = await (\n          web3.eth.ens.getResolver(addrs.rev)\n        )\n        updateTract({ revResolver })\n        updateAddr({ resolver: revResolver.options.address })\n\n        const node = await (\n          revRegistrar.methods.node(addrs.self).call()\n        )\n        const revName = await revResolver.methods.name(node).call()\n        updateAddr({ revName })\n  \n      },\n      if: () => (!!addrs.net && !tracts.revRegistrar),\n    },\n    {\n      name: 'Claim the Reverse Address',\n      func: async () => {\n        if(addrs.revOwner !== addrs.self) {\n          await (\n            tracts.revRegistrar\n            ?.methods.claim(addrs.self)\n            .send({ from: addrs.self })\n          )\n          if(!addrs.rev) throw new Error('Missing Reverse Address')\n          const revOwner = await web3.eth.ens.getOwner(addrs.rev)\n          updateAddr({ revOwner })\n        }\n      },\n      if: () => (\n        /^0x0+$/.test(addrs.revOwner ?? '') && !!tracts.revRegistrar\n      )\n    },\n    {\n      name: 'Set Resolver and Link Reverse Name',\n      func: async () => {\n        if(addrs.revLook === name) {\n          return alert(`Reverse Already Set To: ${name}`)\n        }\n        if(!tracts.revRegistrar) throw new Error('Reverse Registrar Not Set')\n        const node = await (\n          tracts.revRegistrar.methods\n          .setName(name)\n          .send({ from: addrs.self })\n        )\n\n        if(!tracts.revResolver) throw new Error('Reverse Resolver Not Set')\n        const revName = await (\n          tracts.revResolver.methods.name(node).call()\n        )\n        updateAddr({ revName })\n      },\n      if: () => (!!tracts.revResolver && !!tracts.revRegistrar)\n    }\n  ]\n\n  return (\n    <Container>\n      <Stack>\n        <Flex justify=\"center\">\n          <Input\n            textAlign=\"right\"\n            value={name}\n            onChange={evt => setName(evt.target.value)}\n          />\n        </Flex>\n        <Grid templateColumns=\"auto 1fr\" alignItems=\"center\">\n          {Object.entries(titles).map(([key, title], i) => (\n            <Box key={i} display=\"contents\" _hover={{ bg: 'yellow' }}>\n              <Text m={0} textAlign=\"right\" pr={5} minW=\"12em\">{title}:</Text>\n              <Text m={0} textOverflow=\"clip\" title={addrs[key]}><code>{addrs[key]}</code></Text>\n            </Box>\n          ))}\n        </Grid>\n      </Stack>\n      <Stack>\n        {handlers.map((h, i) => (\n          <Button\n            key={i} onClick={h.func}\n            disabled={h.if ? !h.if() : false}\n            m={0} py={10} mt=\"0 ! important\"\n          >\n            {h.name}\n          </Button>\n        ))}\n      </Stack>\n    </Container>\n  )\n}","import React from 'react'\nimport { Container } from '@chakra-ui/react'\nimport ENSReverse from './ENSReverse'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (\n  <Container className=\"App\">\n    <ENSReverse/>\n  </Container>\n)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}